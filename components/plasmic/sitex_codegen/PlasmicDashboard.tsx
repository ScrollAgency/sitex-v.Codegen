// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: d85BId7VkAI4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: d85BId7VkAI4/css

import Ellipse185Icon from "./icons/PlasmicIcon__Ellipse185"; // plasmic-import: LMGMEsIqZnIk/icon
import Ellipse189Icon from "./icons/PlasmicIcon__Ellipse189"; // plasmic-import: 9fJco31tJF44/icon
import PhGridFourFillIcon from "./icons/PlasmicIcon__PhGridFourFill"; // plasmic-import: 9qO_bjF6wmiy/icon
import PhCalendarCheckFillIcon from "./icons/PlasmicIcon__PhCalendarCheckFill"; // plasmic-import: brYXa2NtMl3i/icon
import PhChartDonutFillIcon from "./icons/PlasmicIcon__PhChartDonutFill"; // plasmic-import: I73kfnpQsboJ/icon
import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: WwD3-8_8AoKe/icon
import IconsIcon from "./icons/PlasmicIcon__Icons"; // plasmic-import: 46RluVBAxcpT/icon
import PhHeadphonesFillIcon from "./icons/PlasmicIcon__PhHeadphonesFill"; // plasmic-import: 3fuNVKn1ODwG/icon
import PhSignOutBoldIcon from "./icons/PlasmicIcon__PhSignOutBold"; // plasmic-import: cQAHVYk9-QMN/icon
import PhBellFillIcon from "./icons/PlasmicIcon__PhBellFill"; // plasmic-import: ilHZakykVoBm/icon
import PhMagnifyingGlassIcon from "./icons/PlasmicIcon__PhMagnifyingGlass"; // plasmic-import: mQ-LJEYaqQvt/icon

createPlasmicElementProxy;

export type PlasmicDashboard__VariantMembers = {};
export type PlasmicDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboard__VariantsArgs;
export const PlasmicDashboard__VariantProps = new Array<VariantPropType>();

export type PlasmicDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicDashboard__ArgsType;
export const PlasmicDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboard__OverridesType = {
  root?: Flex__<"div">;
  accueilDashboard?: Flex__<"div">;
  dashboard4?: Flex__<"div">;
  menu?: Flex__<"div">;
  frame133?: Flex__<"div">;
  frame65?: Flex__<"div">;
  frame64?: Flex__<"div">;
  rectangle134?: Flex__<"div">;
  frame66?: Flex__<"div">;
  rectangle135?: Flex__<"div">;
  frame1437253912?: Flex__<"div">;
  frame1437253913?: Flex__<"div">;
  frame1437253915?: Flex__<"div">;
  frame1437253914?: Flex__<"div">;
  frame1437253916?: Flex__<"div">;
  frame1171275843?: Flex__<"div">;
  frame1171275846?: Flex__<"div">;
  expandTab?: Flex__<"div">;
  expandTab2?: Flex__<"div">;
  header?: Flex__<"div">;
  expandTab3?: Flex__<"div">;
  search?: Flex__<"div">;
  search2?: Flex__<"div">;
};

export interface DefaultDashboardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props: {
  variants: PlasmicDashboard__VariantsArgs;
  args: PlasmicDashboard__ArgsType;
  overrides: PlasmicDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDashboard.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDashboard.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDashboard.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicDashboard.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicDashboard.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicDashboard.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"accueilDashboard"}
            data-plasmic-override={overrides.accueilDashboard}
            className={classNames(projectcss.all, sty.accueilDashboard)}
          >
            <div
              data-plasmic-name={"dashboard4"}
              data-plasmic-override={overrides.dashboard4}
              className={classNames(projectcss.all, sty.dashboard4)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              hasGap={true}
              className={classNames(projectcss.all, sty.menu)}
            >
              <div
                data-plasmic-name={"frame133"}
                data-plasmic-override={overrides.frame133}
                className={classNames(projectcss.all, sty.frame133)}
              >
                <div
                  data-plasmic-name={"frame65"}
                  data-plasmic-override={overrides.frame65}
                  className={classNames(projectcss.all, sty.frame65)}
                >
                  <div
                    data-plasmic-name={"frame64"}
                    data-plasmic-override={overrides.frame64}
                    className={classNames(projectcss.all, sty.frame64)}
                  >
                    <div
                      data-plasmic-name={"rectangle134"}
                      data-plasmic-override={overrides.rectangle134}
                      className={classNames(projectcss.all, sty.rectangle134)}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame66"}
                    data-plasmic-override={overrides.frame66}
                    className={classNames(projectcss.all, sty.frame66)}
                  >
                    <div
                      data-plasmic-name={"rectangle135"}
                      data-plasmic-override={overrides.rectangle135}
                      className={classNames(projectcss.all, sty.rectangle135)}
                    />

                    <Ellipse185Icon
                      className={classNames(projectcss.all, sty.svg___5TwtD)}
                      role={"img"}
                    />

                    <Ellipse189Icon
                      className={classNames(projectcss.all, sty.svg__toqpC)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w1FLx
                  )}
                >
                  {"Sitex"}
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1437253912"}
                data-plasmic-override={overrides.frame1437253912}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1437253912)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437253913"}
                  data-plasmic-override={overrides.frame1437253913}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437253913)}
                >
                  <PhGridFourFillIcon
                    className={classNames(projectcss.all, sty.svg__w9E39)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pmBQs
                    )}
                  >
                    {"ACCUEIL"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437253915"}
                  data-plasmic-override={overrides.frame1437253915}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437253915)}
                >
                  <PhCalendarCheckFillIcon
                    className={classNames(projectcss.all, sty.svg__r2JKf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r2S4T
                    )}
                  >
                    {"OP\u00c9RATIONS"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437253914"}
                  data-plasmic-override={overrides.frame1437253914}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437253914)}
                >
                  <PhChartDonutFillIcon
                    className={classNames(projectcss.all, sty.svg__eEjQs)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lCx2
                    )}
                  >
                    {"BILAN/RETEX"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437253916"}
                  data-plasmic-override={overrides.frame1437253916}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437253916)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSystemBanners"] = true
                      ? (() => {
                          const actionArgs = {};
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSystemBanners"] != null &&
                      typeof $steps["goToSystemBanners"] === "object" &&
                      typeof $steps["goToSystemBanners"].then === "function"
                    ) {
                      $steps["goToSystemBanners"] = await $steps[
                        "goToSystemBanners"
                      ];
                    }
                  }}
                >
                  <PhGearFillIcon
                    className={classNames(projectcss.all, sty.svg__yfScY)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dfCiB
                    )}
                  >
                    {"PARAM\u00c8TRES"}
                  </div>
                </Stack__>
              </Stack__>
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1171275843"}
                  data-plasmic-override={overrides.frame1171275843}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1171275843)}
                >
                  <IconsIcon
                    className={classNames(projectcss.all, sty.svg__qgKZ)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1171275846"}
                data-plasmic-override={overrides.frame1171275846}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1171275846)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"expandTab"}
                    data-plasmic-override={overrides.expandTab}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.expandTab)}
                  >
                    <PhHeadphonesFillIcon
                      className={classNames(projectcss.all, sty.svg__lTHzG)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qji7M
                      )}
                    >
                      {"SUPPORT"}
                    </div>
                  </Stack__>
                ) : null}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"expandTab2"}
                  data-plasmic-override={overrides.expandTab2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.expandTab2)}
                >
                  <PhSignOutBoldIcon
                    className={classNames(projectcss.all, sty.svg__aEqgo)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k6Nwa
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToLogin"] = true
                        ? (() => {
                            const actionArgs = {};
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToLogin"] != null &&
                        typeof $steps["goToLogin"] === "object" &&
                        typeof $steps["goToLogin"].then === "function"
                      ) {
                        $steps["goToLogin"] = await $steps["goToLogin"];
                      }
                    }}
                  >
                    {"D\u00e9connexion"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ypnX9
                )}
              >
                {"Dashboard"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"expandTab3"}
                data-plasmic-override={overrides.expandTab3}
                hasGap={true}
                className={classNames(projectcss.all, sty.expandTab3)}
              >
                <PhBellFillIcon
                  className={classNames(projectcss.all, sty.svg___9K7Q)}
                  role={"img"}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"search"}
                  data-plasmic-override={overrides.search}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.search)}
                >
                  <PhMagnifyingGlassIcon
                    className={classNames(projectcss.all, sty.svg__rLqFc)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"search2"}
                    data-plasmic-override={overrides.search2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.search2
                    )}
                  >
                    {"Rechercher..."}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "accueilDashboard",
    "dashboard4",
    "menu",
    "frame133",
    "frame65",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "frame1437253912",
    "frame1437253913",
    "frame1437253915",
    "frame1437253914",
    "frame1437253916",
    "frame1171275843",
    "frame1171275846",
    "expandTab",
    "expandTab2",
    "header",
    "expandTab3",
    "search",
    "search2"
  ],
  accueilDashboard: [
    "accueilDashboard",
    "dashboard4",
    "menu",
    "frame133",
    "frame65",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "frame1437253912",
    "frame1437253913",
    "frame1437253915",
    "frame1437253914",
    "frame1437253916",
    "frame1171275843",
    "frame1171275846",
    "expandTab",
    "expandTab2",
    "header",
    "expandTab3",
    "search",
    "search2"
  ],
  dashboard4: ["dashboard4"],
  menu: [
    "menu",
    "frame133",
    "frame65",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "frame1437253912",
    "frame1437253913",
    "frame1437253915",
    "frame1437253914",
    "frame1437253916",
    "frame1171275843",
    "frame1171275846",
    "expandTab",
    "expandTab2"
  ],
  frame133: [
    "frame133",
    "frame65",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135"
  ],
  frame65: ["frame65", "frame64", "rectangle134", "frame66", "rectangle135"],
  frame64: ["frame64", "rectangle134"],
  rectangle134: ["rectangle134"],
  frame66: ["frame66", "rectangle135"],
  rectangle135: ["rectangle135"],
  frame1437253912: [
    "frame1437253912",
    "frame1437253913",
    "frame1437253915",
    "frame1437253914",
    "frame1437253916"
  ],
  frame1437253913: ["frame1437253913"],
  frame1437253915: ["frame1437253915"],
  frame1437253914: ["frame1437253914"],
  frame1437253916: ["frame1437253916"],
  frame1171275843: ["frame1171275843"],
  frame1171275846: ["frame1171275846", "expandTab", "expandTab2"],
  expandTab: ["expandTab"],
  expandTab2: ["expandTab2"],
  header: ["header", "expandTab3", "search", "search2"],
  expandTab3: ["expandTab3", "search", "search2"],
  search: ["search", "search2"],
  search2: ["search2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  accueilDashboard: "div";
  dashboard4: "div";
  menu: "div";
  frame133: "div";
  frame65: "div";
  frame64: "div";
  rectangle134: "div";
  frame66: "div";
  rectangle135: "div";
  frame1437253912: "div";
  frame1437253913: "div";
  frame1437253915: "div";
  frame1437253914: "div";
  frame1437253916: "div";
  frame1171275843: "div";
  frame1171275846: "div";
  expandTab: "div";
  expandTab2: "div";
  header: "div";
  expandTab3: "div";
  search: "div";
  search2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboard__VariantsArgs;
    args?: PlasmicDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accueilDashboard: makeNodeComponent("accueilDashboard"),
    dashboard4: makeNodeComponent("dashboard4"),
    menu: makeNodeComponent("menu"),
    frame133: makeNodeComponent("frame133"),
    frame65: makeNodeComponent("frame65"),
    frame64: makeNodeComponent("frame64"),
    rectangle134: makeNodeComponent("rectangle134"),
    frame66: makeNodeComponent("frame66"),
    rectangle135: makeNodeComponent("rectangle135"),
    frame1437253912: makeNodeComponent("frame1437253912"),
    frame1437253913: makeNodeComponent("frame1437253913"),
    frame1437253915: makeNodeComponent("frame1437253915"),
    frame1437253914: makeNodeComponent("frame1437253914"),
    frame1437253916: makeNodeComponent("frame1437253916"),
    frame1171275843: makeNodeComponent("frame1171275843"),
    frame1171275846: makeNodeComponent("frame1171275846"),
    expandTab: makeNodeComponent("expandTab"),
    expandTab2: makeNodeComponent("expandTab2"),
    header: makeNodeComponent("header"),
    expandTab3: makeNodeComponent("expandTab3"),
    search: makeNodeComponent("search"),
    search2: makeNodeComponent("search2"),

    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Dashboard",
      description: "Dashboard",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
