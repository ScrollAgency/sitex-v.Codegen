// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: NOpq3sKcj9K4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import SmallLogo from "../../SmallLogo"; // plasmic-import: TPfRsLAK0yBw/component
import TextInput from "../../TextInput"; // plasmic-import: p2wlGiF5nbRC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: NOpq3sKcj9K4/css

import PhGridFourFillIcon from "./icons/PlasmicIcon__PhGridFourFill"; // plasmic-import: 9qO_bjF6wmiy/icon
import PhCalendarCheckFillIcon from "./icons/PlasmicIcon__PhCalendarCheckFill"; // plasmic-import: brYXa2NtMl3i/icon
import PhChartDonutFillIcon from "./icons/PlasmicIcon__PhChartDonutFill"; // plasmic-import: I73kfnpQsboJ/icon
import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: WwD3-8_8AoKe/icon
import PhSignOutBoldIcon from "./icons/PlasmicIcon__PhSignOutBold"; // plasmic-import: cQAHVYk9-QMN/icon
import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: QndmiDcp-DlO/icon
import PhBellFillIcon from "./icons/PlasmicIcon__PhBellFill"; // plasmic-import: ilHZakykVoBm/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 80gfzuFHPKbB/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: r6EQmBRwKBEe/icon

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  content?: Flex__<"div">;
  sidebarMenu?: Flex__<"div">;
  smallLogo?: Flex__<typeof SmallLogo>;
  menuLinksWrapper?: Flex__<"div">;
  homeMenuLink?: Flex__<"div">;
  homeIcon?: Flex__<"svg">;
  operationMenuWrapper?: Flex__<"div">;
  operationMenuLink?: Flex__<"div">;
  operationIcon?: Flex__<"svg">;
  operationMenuOptions?: Flex__<"div">;
  operationOption?: Flex__<"div">;
  label?: Flex__<"div">;
  sidebarMenuSublink2?: Flex__<"div">;
  label2?: Flex__<"div">;
  sidebarMenuSublink3?: Flex__<"div">;
  label3?: Flex__<"div">;
  sidebarMenuSublink4?: Flex__<"div">;
  label4?: Flex__<"div">;
  sidebarMenuSublink5?: Flex__<"div">;
  label5?: Flex__<"div">;
  bilanMenuLink?: Flex__<"div">;
  bilanIcon?: Flex__<"svg">;
  settingsMenuLink?: Flex__<"div">;
  settingsIcon?: Flex__<"svg">;
  logoutMenu?: Flex__<"div">;
  logoutIcon?: Flex__<"svg">;
  urgenceWrapper?: Flex__<"div">;
  statusBadge?: Flex__<"div">;
  statusBadge2?: Flex__<"div">;
  dashboardMain?: Flex__<"div">;
  dashboardHeader?: Flex__<"div">;
  title?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(projectcss.all, sty.content)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"sidebarMenu"}
            data-plasmic-override={overrides.sidebarMenu}
            hasGap={true}
            className={classNames(projectcss.all, sty.sidebarMenu)}
          >
            <SmallLogo
              data-plasmic-name={"smallLogo"}
              data-plasmic-override={overrides.smallLogo}
              className={classNames("__wab_instance", sty.smallLogo)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"menuLinksWrapper"}
              data-plasmic-override={overrides.menuLinksWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.menuLinksWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"homeMenuLink"}
                data-plasmic-override={overrides.homeMenuLink}
                hasGap={true}
                className={classNames(projectcss.all, sty.homeMenuLink)}
              >
                <PhGridFourFillIcon
                  data-plasmic-name={"homeIcon"}
                  data-plasmic-override={overrides.homeIcon}
                  className={classNames(projectcss.all, sty.homeIcon)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pu16S
                  )}
                >
                  {"ACCUEIL"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"operationMenuWrapper"}
                data-plasmic-override={overrides.operationMenuWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.operationMenuWrapper)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"operationMenuLink"}
                  data-plasmic-override={overrides.operationMenuLink}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.operationMenuLink)}
                >
                  <PhCalendarCheckFillIcon
                    data-plasmic-name={"operationIcon"}
                    data-plasmic-override={overrides.operationIcon}
                    className={classNames(projectcss.all, sty.operationIcon)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v3BQb
                    )}
                  >
                    {"OP\u00c9RATIONS"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"operationMenuOptions"}
                  data-plasmic-override={overrides.operationMenuOptions}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.operationMenuOptions
                  )}
                >
                  <div
                    data-plasmic-name={"operationOption"}
                    data-plasmic-override={overrides.operationOption}
                    className={classNames(projectcss.all, sty.operationOption)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                    >
                      {"\u00c9v\u00e8nements"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"sidebarMenuSublink2"}
                    data-plasmic-override={overrides.sidebarMenuSublink2}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink2
                    )}
                  >
                    <div
                      data-plasmic-name={"label2"}
                      data-plasmic-override={overrides.label2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label2
                      )}
                    >
                      {"Main courante"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"sidebarMenuSublink3"}
                    data-plasmic-override={overrides.sidebarMenuSublink3}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink3
                    )}
                  >
                    <div
                      data-plasmic-name={"label3"}
                      data-plasmic-override={overrides.label3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label3
                      )}
                    >
                      {"Documents"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"sidebarMenuSublink4"}
                    data-plasmic-override={overrides.sidebarMenuSublink4}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink4
                    )}
                  >
                    <div
                      data-plasmic-name={"label4"}
                      data-plasmic-override={overrides.label4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label4
                      )}
                    >
                      {"Positions site"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"sidebarMenuSublink5"}
                    data-plasmic-override={overrides.sidebarMenuSublink5}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink5
                    )}
                  >
                    <div
                      data-plasmic-name={"label5"}
                      data-plasmic-override={overrides.label5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label5
                      )}
                    >
                      {"Annuaire"}
                    </div>
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"bilanMenuLink"}
                data-plasmic-override={overrides.bilanMenuLink}
                hasGap={true}
                className={classNames(projectcss.all, sty.bilanMenuLink)}
              >
                <PhChartDonutFillIcon
                  data-plasmic-name={"bilanIcon"}
                  data-plasmic-override={overrides.bilanIcon}
                  className={classNames(projectcss.all, sty.bilanIcon)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g0HS
                  )}
                >
                  {"BILAN/RETEX"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"settingsMenuLink"}
                data-plasmic-override={overrides.settingsMenuLink}
                hasGap={true}
                className={classNames(projectcss.all, sty.settingsMenuLink)}
              >
                <PhGearFillIcon
                  data-plasmic-name={"settingsIcon"}
                  data-plasmic-override={overrides.settingsIcon}
                  className={classNames(projectcss.all, sty.settingsIcon)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v0Ch
                  )}
                >
                  {"PARAM\u00c8TRES"}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"logoutMenu"}
              data-plasmic-override={overrides.logoutMenu}
              hasGap={true}
              className={classNames(projectcss.all, sty.logoutMenu)}
            >
              <PhSignOutBoldIcon
                data-plasmic-name={"logoutIcon"}
                data-plasmic-override={overrides.logoutIcon}
                className={classNames(projectcss.all, sty.logoutIcon)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___839Zu
                )}
              >
                {"D\u00e9connexion"}
              </div>
            </Stack__>
            <div
              data-plasmic-name={"urgenceWrapper"}
              data-plasmic-override={overrides.urgenceWrapper}
              className={classNames(projectcss.all, sty.urgenceWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"statusBadge"}
                data-plasmic-override={overrides.statusBadge}
                hasGap={true}
                className={classNames(projectcss.all, sty.statusBadge)}
              >
                {false ? (
                  <DotIcon
                    className={classNames(projectcss.all, sty.svg__h6N4O)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kXuRz
                  )}
                >
                  {"0"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"statusBadge2"}
                data-plasmic-override={overrides.statusBadge2}
                hasGap={true}
                className={classNames(projectcss.all, sty.statusBadge2)}
              >
                {false ? (
                  <DotIcon
                    className={classNames(projectcss.all, sty.svg__jnqgL)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uQsMn
                  )}
                >
                  {"0"}
                </div>
              </Stack__>
            </div>
          </Stack__>
          <div
            data-plasmic-name={"dashboardMain"}
            data-plasmic-override={overrides.dashboardMain}
            className={classNames(projectcss.all, sty.dashboardMain)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"dashboardHeader"}
              data-plasmic-override={overrides.dashboardHeader}
              hasGap={true}
              className={classNames(projectcss.all, sty.dashboardHeader)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.title
                )}
              >
                {"Dashboard "}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <PhBellFillIcon
                  className={classNames(projectcss.all, sty.svg___3L0XH)}
                  role={"img"}
                />

                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Placeholder"}
                  type={"Default"}
                  value={
                    generateStateValueProp($state, ["textInput", "value"]) ?? ""
                  }
                />
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content",
    "sidebarMenu",
    "smallLogo",
    "menuLinksWrapper",
    "homeMenuLink",
    "homeIcon",
    "operationMenuWrapper",
    "operationMenuLink",
    "operationIcon",
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5",
    "bilanMenuLink",
    "bilanIcon",
    "settingsMenuLink",
    "settingsIcon",
    "logoutMenu",
    "logoutIcon",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2",
    "dashboardMain",
    "dashboardHeader",
    "title",
    "freeBox",
    "textInput"
  ],
  content: [
    "content",
    "sidebarMenu",
    "smallLogo",
    "menuLinksWrapper",
    "homeMenuLink",
    "homeIcon",
    "operationMenuWrapper",
    "operationMenuLink",
    "operationIcon",
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5",
    "bilanMenuLink",
    "bilanIcon",
    "settingsMenuLink",
    "settingsIcon",
    "logoutMenu",
    "logoutIcon",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2",
    "dashboardMain",
    "dashboardHeader",
    "title",
    "freeBox",
    "textInput"
  ],
  sidebarMenu: [
    "sidebarMenu",
    "smallLogo",
    "menuLinksWrapper",
    "homeMenuLink",
    "homeIcon",
    "operationMenuWrapper",
    "operationMenuLink",
    "operationIcon",
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5",
    "bilanMenuLink",
    "bilanIcon",
    "settingsMenuLink",
    "settingsIcon",
    "logoutMenu",
    "logoutIcon",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  smallLogo: ["smallLogo"],
  menuLinksWrapper: [
    "menuLinksWrapper",
    "homeMenuLink",
    "homeIcon",
    "operationMenuWrapper",
    "operationMenuLink",
    "operationIcon",
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5",
    "bilanMenuLink",
    "bilanIcon",
    "settingsMenuLink",
    "settingsIcon"
  ],
  homeMenuLink: ["homeMenuLink", "homeIcon"],
  homeIcon: ["homeIcon"],
  operationMenuWrapper: [
    "operationMenuWrapper",
    "operationMenuLink",
    "operationIcon",
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5"
  ],
  operationMenuLink: ["operationMenuLink", "operationIcon"],
  operationIcon: ["operationIcon"],
  operationMenuOptions: [
    "operationMenuOptions",
    "operationOption",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "sidebarMenuSublink5",
    "label5"
  ],
  operationOption: ["operationOption", "label"],
  label: ["label"],
  sidebarMenuSublink2: ["sidebarMenuSublink2", "label2"],
  label2: ["label2"],
  sidebarMenuSublink3: ["sidebarMenuSublink3", "label3"],
  label3: ["label3"],
  sidebarMenuSublink4: ["sidebarMenuSublink4", "label4"],
  label4: ["label4"],
  sidebarMenuSublink5: ["sidebarMenuSublink5", "label5"],
  label5: ["label5"],
  bilanMenuLink: ["bilanMenuLink", "bilanIcon"],
  bilanIcon: ["bilanIcon"],
  settingsMenuLink: ["settingsMenuLink", "settingsIcon"],
  settingsIcon: ["settingsIcon"],
  logoutMenu: ["logoutMenu", "logoutIcon"],
  logoutIcon: ["logoutIcon"],
  urgenceWrapper: ["urgenceWrapper", "statusBadge", "statusBadge2"],
  statusBadge: ["statusBadge"],
  statusBadge2: ["statusBadge2"],
  dashboardMain: [
    "dashboardMain",
    "dashboardHeader",
    "title",
    "freeBox",
    "textInput"
  ],
  dashboardHeader: ["dashboardHeader", "title", "freeBox", "textInput"],
  title: ["title"],
  freeBox: ["freeBox", "textInput"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  content: "div";
  sidebarMenu: "div";
  smallLogo: typeof SmallLogo;
  menuLinksWrapper: "div";
  homeMenuLink: "div";
  homeIcon: "svg";
  operationMenuWrapper: "div";
  operationMenuLink: "div";
  operationIcon: "svg";
  operationMenuOptions: "div";
  operationOption: "div";
  label: "div";
  sidebarMenuSublink2: "div";
  label2: "div";
  sidebarMenuSublink3: "div";
  label3: "div";
  sidebarMenuSublink4: "div";
  label4: "div";
  sidebarMenuSublink5: "div";
  label5: "div";
  bilanMenuLink: "div";
  bilanIcon: "svg";
  settingsMenuLink: "div";
  settingsIcon: "svg";
  logoutMenu: "div";
  logoutIcon: "svg";
  urgenceWrapper: "div";
  statusBadge: "div";
  statusBadge2: "div";
  dashboardMain: "div";
  dashboardHeader: "div";
  title: "div";
  freeBox: "div";
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"8726c2f0-9695-458a-8fc5-c31e4b255f52"}
      appId={"orPHpegkXfnsyZCa6kLatK"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    sidebarMenu: makeNodeComponent("sidebarMenu"),
    smallLogo: makeNodeComponent("smallLogo"),
    menuLinksWrapper: makeNodeComponent("menuLinksWrapper"),
    homeMenuLink: makeNodeComponent("homeMenuLink"),
    homeIcon: makeNodeComponent("homeIcon"),
    operationMenuWrapper: makeNodeComponent("operationMenuWrapper"),
    operationMenuLink: makeNodeComponent("operationMenuLink"),
    operationIcon: makeNodeComponent("operationIcon"),
    operationMenuOptions: makeNodeComponent("operationMenuOptions"),
    operationOption: makeNodeComponent("operationOption"),
    label: makeNodeComponent("label"),
    sidebarMenuSublink2: makeNodeComponent("sidebarMenuSublink2"),
    label2: makeNodeComponent("label2"),
    sidebarMenuSublink3: makeNodeComponent("sidebarMenuSublink3"),
    label3: makeNodeComponent("label3"),
    sidebarMenuSublink4: makeNodeComponent("sidebarMenuSublink4"),
    label4: makeNodeComponent("label4"),
    sidebarMenuSublink5: makeNodeComponent("sidebarMenuSublink5"),
    label5: makeNodeComponent("label5"),
    bilanMenuLink: makeNodeComponent("bilanMenuLink"),
    bilanIcon: makeNodeComponent("bilanIcon"),
    settingsMenuLink: makeNodeComponent("settingsMenuLink"),
    settingsIcon: makeNodeComponent("settingsIcon"),
    logoutMenu: makeNodeComponent("logoutMenu"),
    logoutIcon: makeNodeComponent("logoutIcon"),
    urgenceWrapper: makeNodeComponent("urgenceWrapper"),
    statusBadge: makeNodeComponent("statusBadge"),
    statusBadge2: makeNodeComponent("statusBadge2"),
    dashboardMain: makeNodeComponent("dashboardMain"),
    dashboardHeader: makeNodeComponent("dashboardHeader"),
    title: makeNodeComponent("title"),
    freeBox: makeNodeComponent("freeBox"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
