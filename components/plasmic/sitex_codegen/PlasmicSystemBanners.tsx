// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: iIq611Ma0PfO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicSystemBanners.module.css"; // plasmic-import: iIq611Ma0PfO/css

import AlertTriangleIcon from "./icons/PlasmicIcon__AlertTriangle"; // plasmic-import: y9DXIr-rA6Va/icon
import MiCircleErrorIcon from "./icons/PlasmicIcon__MiCircleError"; // plasmic-import: _pLEfCsTnIfz/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: ZUSBJVQPahUI/icon
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle"; // plasmic-import: lEvXwfHpddbD/icon
import OutlinedIcon from "./icons/PlasmicIcon__Outlined"; // plasmic-import: s55A2QlaYY-S/icon
import FilledIcon from "./icons/PlasmicIcon__Filled"; // plasmic-import: DGjoGeBx6DP7/icon
import Outlined2Icon from "./icons/PlasmicIcon__Outlined2"; // plasmic-import: 8NfwXy4RmsAE/icon
import Outlined3Icon from "./icons/PlasmicIcon__Outlined3"; // plasmic-import: WsxYwnMKtihf/icon

createPlasmicElementProxy;

export type PlasmicSystemBanners__VariantMembers = {};
export type PlasmicSystemBanners__VariantsArgs = {};
type VariantPropType = keyof PlasmicSystemBanners__VariantsArgs;
export const PlasmicSystemBanners__VariantProps = new Array<VariantPropType>();

export type PlasmicSystemBanners__ArgsType = {};
type ArgPropType = keyof PlasmicSystemBanners__ArgsType;
export const PlasmicSystemBanners__ArgProps = new Array<ArgPropType>();

export type PlasmicSystemBanners__OverridesType = {
  root?: Flex__<"div">;
  systemIcons2?: Flex__<"div">;
  stateWarning?: Flex__<"div">;
  stateError?: Flex__<"div">;
  stateInfo?: Flex__<"div">;
  iconamoonInformationCircle4?: Flex__<"div">;
  stateSuccess?: Flex__<"div">;
  systemBanners?: Flex__<"div">;
  property1Default11?: Flex__<"div">;
  signedByBaseBannerLowTextButtonBadgeWarning?: Flex__<"div">;
  banner11?: Flex__<"div">;
  artworkFrame11?: Flex__<"div">;
  featuredIcon11?: Flex__<"div">;
  textFrame11?: Flex__<"div">;
  button8?: Flex__<"div">;
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4?: Flex__<"div">;
  button9?: Flex__<"div">;
  content4?: Flex__<"div">;
  heart4?: Flex__<"div">;
  chevronDownSmall4?: Flex__<"div">;
  property1Default2?: Flex__<"div">;
  signedByBaseBannerLowTextButtonBadgeNegative?: Flex__<"div">;
  banner2?: Flex__<"div">;
  artworkFrame2?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textFrame2?: Flex__<"div">;
  button?: Flex__<"div">;
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth?: Flex__<"div">;
  button2?: Flex__<"div">;
  content?: Flex__<"div">;
  heart?: Flex__<"div">;
  chevronDownSmall?: Flex__<"div">;
  property1Default5?: Flex__<"div">;
  signedByBaseBannerLowTextButtonBadgeAccent?: Flex__<"div">;
  banner5?: Flex__<"div">;
  artworkFrame5?: Flex__<"div">;
  featuredIcon5?: Flex__<"div">;
  iconamoonInformationCircle2?: Flex__<"div">;
  textFrame5?: Flex__<"div">;
  button3?: Flex__<"div">;
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2?: Flex__<"div">;
  button4?: Flex__<"div">;
  content2?: Flex__<"div">;
  heart2?: Flex__<"div">;
  chevronDownSmall2?: Flex__<"div">;
  property1Default8?: Flex__<"div">;
  signedByBaseBannerLowTextButtonBadgePositive?: Flex__<"div">;
  banner8?: Flex__<"div">;
  artworkFrame8?: Flex__<"div">;
  featuredIcon8?: Flex__<"div">;
  textFrame8?: Flex__<"div">;
  button5?: Flex__<"div">;
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3?: Flex__<"div">;
  button6?: Flex__<"div">;
  content3?: Flex__<"div">;
  heart3?: Flex__<"div">;
  chevronDownSmall3?: Flex__<"div">;
  property1Default3?: Flex__<"div">;
  signedByBaseBannerLowIconButtonBadgeWarning?: Flex__<"div">;
  banner3?: Flex__<"div">;
  artworkFrame3?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textFrame3?: Flex__<"div">;
  button7?: Flex__<"div">;
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth?: Flex__<"div">;
  icon?: Flex__<"div">;
  x?: Flex__<"div">;
  label?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall?: Flex__<"div">;
  spacer?: Flex__<"div">;
  property1Default6?: Flex__<"div">;
  signedByBaseBannerLowIconButtonBadgeNegative?: Flex__<"div">;
  banner6?: Flex__<"div">;
  artworkFrame6?: Flex__<"div">;
  featuredIcon6?: Flex__<"div">;
  textFrame6?: Flex__<"div">;
  button10?: Flex__<"div">;
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2?: Flex__<"div">;
  icon2?: Flex__<"div">;
  x2?: Flex__<"div">;
  label2?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall2?: Flex__<"div">;
  spacer2?: Flex__<"div">;
  property1Default9?: Flex__<"div">;
  signedByBaseBannerLowIconButtonBadgeAccent?: Flex__<"div">;
  banner9?: Flex__<"div">;
  artworkFrame9?: Flex__<"div">;
  featuredIcon9?: Flex__<"div">;
  iconamoonInformationCircle3?: Flex__<"div">;
  textFrame9?: Flex__<"div">;
  buttonCircleSmallTertiaryIconOnlyEnabled?: Flex__<"div">;
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3?: Flex__<"div">;
  icon3?: Flex__<"div">;
  x3?: Flex__<"div">;
  label3?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall3?: Flex__<"div">;
  spacer3?: Flex__<"div">;
  property1Default12?: Flex__<"div">;
  signedByBaseBannerLowIconButtonBadgePositive?: Flex__<"div">;
  banner12?: Flex__<"div">;
  artworkFrame12?: Flex__<"div">;
  featuredIcon12?: Flex__<"div">;
  textFrame12?: Flex__<"div">;
  buttonCircleSmallTertiaryIconOnlyEnabled2?: Flex__<"div">;
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4?: Flex__<"div">;
  icon4?: Flex__<"div">;
  x4?: Flex__<"div">;
  label4?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall4?: Flex__<"div">;
  spacer4?: Flex__<"div">;
  property1Default?: Flex__<"div">;
  signedByBaseBannerLowSimpleBadgePositive?: Flex__<"div">;
  banner?: Flex__<"div">;
  artworkFrame?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textFrame?: Flex__<"div">;
  property1Default4?: Flex__<"div">;
  signedByBaseBannerLowSimpleBadgeAccent?: Flex__<"div">;
  banner4?: Flex__<"div">;
  artworkFrame4?: Flex__<"div">;
  featuredIcon4?: Flex__<"div">;
  iconamoonInformationCircle?: Flex__<"div">;
  textFrame4?: Flex__<"div">;
  property1Default7?: Flex__<"div">;
  signedByBaseBannerLowSimpleBadgeNegative?: Flex__<"div">;
  banner7?: Flex__<"div">;
  artworkFrame7?: Flex__<"div">;
  featuredIcon7?: Flex__<"div">;
  textFrame7?: Flex__<"div">;
  property1Default10?: Flex__<"div">;
  signedByBaseBannerLowSimpleBadgeWarning?: Flex__<"div">;
  banner10?: Flex__<"div">;
  artworkFrame10?: Flex__<"div">;
  featuredIcon10?: Flex__<"div">;
  textFrame10?: Flex__<"div">;
  importanceStatus?: Flex__<"div">;
  importanceStatusBlanc?: Flex__<"div">;
  importanceStatusOrange?: Flex__<"div">;
  importanceStatusJaune?: Flex__<"div">;
  importanceStatusNoir?: Flex__<"div">;
  importanceStatusRouge?: Flex__<"div">;
};

export interface DefaultSystemBannersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSystemBanners__RenderFunc(props: {
  variants: PlasmicSystemBanners__VariantsArgs;
  args: PlasmicSystemBanners__ArgsType;
  overrides: PlasmicSystemBanners__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"systemIcons2"}
            data-plasmic-override={overrides.systemIcons2}
            className={classNames(projectcss.all, sty.systemIcons2)}
          >
            <div
              data-plasmic-name={"stateWarning"}
              data-plasmic-override={overrides.stateWarning}
              className={classNames(projectcss.all, sty.stateWarning)}
            >
              <AlertTriangleIcon
                className={classNames(projectcss.all, sty.svg__efbzI)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"stateError"}
              data-plasmic-override={overrides.stateError}
              className={classNames(projectcss.all, sty.stateError)}
            >
              <MiCircleErrorIcon
                className={classNames(projectcss.all, sty.svg__f4Rrz)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"stateInfo"}
              data-plasmic-override={overrides.stateInfo}
              className={classNames(projectcss.all, sty.stateInfo)}
            >
              <div
                data-plasmic-name={"iconamoonInformationCircle4"}
                data-plasmic-override={overrides.iconamoonInformationCircle4}
                className={classNames(
                  projectcss.all,
                  sty.iconamoonInformationCircle4
                )}
              >
                <GroupIcon
                  className={classNames(projectcss.all, sty.svg___7Himn)}
                  role={"img"}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"stateSuccess"}
              data-plasmic-override={overrides.stateSuccess}
              className={classNames(projectcss.all, sty.stateSuccess)}
            >
              <CheckCircleIcon
                className={classNames(projectcss.all, sty.svg__xg4I)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"systemBanners"}
            data-plasmic-override={overrides.systemBanners}
            className={classNames(projectcss.all, sty.systemBanners)}
          >
            <div
              data-plasmic-name={"property1Default11"}
              data-plasmic-override={overrides.property1Default11}
              className={classNames(projectcss.all, sty.property1Default11)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowTextButtonBadgeWarning"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowTextButtonBadgeWarning
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowTextButtonBadgeWarning
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner11"}
                data-plasmic-override={overrides.banner11}
                className={classNames(projectcss.all, sty.banner11)}
              >
                <div
                  data-plasmic-name={"artworkFrame11"}
                  data-plasmic-override={overrides.artworkFrame11}
                  className={classNames(projectcss.all, sty.artworkFrame11)}
                >
                  <div
                    data-plasmic-name={"featuredIcon11"}
                    data-plasmic-override={overrides.featuredIcon11}
                    className={classNames(projectcss.all, sty.featuredIcon11)}
                  >
                    <AlertTriangleIcon
                      className={classNames(projectcss.all, sty.svg__r3Pyh)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame11"}
                  data-plasmic-override={overrides.textFrame11}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame11)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aEBP
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qOr25
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"button8"}
                  data-plasmic-override={overrides.button8}
                  className={classNames(projectcss.all, sty.button8)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4
                      )}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"button9"}
                    data-plasmic-override={overrides.button9}
                    className={classNames(projectcss.all, sty.button9)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content4"}
                      data-plasmic-override={overrides.content4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content4)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"heart4"}
                          data-plasmic-override={overrides.heart4}
                          className={classNames(projectcss.all, sty.heart4)}
                        >
                          {false ? (
                            <OutlinedIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3YBf
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <FilledIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xB01D
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bfcIt
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"chevronDownSmall4"}
                          data-plasmic-override={overrides.chevronDownSmall4}
                          className={classNames(
                            projectcss.all,
                            sty.chevronDownSmall4
                          )}
                        >
                          {false ? (
                            <Outlined2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__a08X
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <Outlined2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__e4PaH
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </Stack__>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default2"}
              data-plasmic-override={overrides.property1Default2}
              className={classNames(projectcss.all, sty.property1Default2)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowTextButtonBadgeNegative"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowTextButtonBadgeNegative
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowTextButtonBadgeNegative
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner2"}
                data-plasmic-override={overrides.banner2}
                className={classNames(projectcss.all, sty.banner2)}
              >
                <div
                  data-plasmic-name={"artworkFrame2"}
                  data-plasmic-override={overrides.artworkFrame2}
                  className={classNames(projectcss.all, sty.artworkFrame2)}
                >
                  <div
                    data-plasmic-name={"featuredIcon2"}
                    data-plasmic-override={overrides.featuredIcon2}
                    className={classNames(projectcss.all, sty.featuredIcon2)}
                  >
                    <MiCircleErrorIcon
                      className={classNames(projectcss.all, sty.svg__vxnaA)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame2"}
                  data-plasmic-override={overrides.textFrame2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nzcVj
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__edT1Y
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(projectcss.all, sty.button)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth
                      )}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames(projectcss.all, sty.button2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content"}
                      data-plasmic-override={overrides.content}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"heart"}
                          data-plasmic-override={overrides.heart}
                          className={classNames(projectcss.all, sty.heart)}
                        >
                          {false ? (
                            <OutlinedIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ptqWk
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <FilledIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dN7Yx
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dJtp6
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"chevronDownSmall"}
                          data-plasmic-override={overrides.chevronDownSmall}
                          className={classNames(
                            projectcss.all,
                            sty.chevronDownSmall
                          )}
                        >
                          {false ? (
                            <Outlined2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jh76G
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <Outlined2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bKcgb
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </Stack__>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default5"}
              data-plasmic-override={overrides.property1Default5}
              className={classNames(projectcss.all, sty.property1Default5)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowTextButtonBadgeAccent"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowTextButtonBadgeAccent
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowTextButtonBadgeAccent
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner5"}
                data-plasmic-override={overrides.banner5}
                className={classNames(projectcss.all, sty.banner5)}
              >
                <div
                  data-plasmic-name={"artworkFrame5"}
                  data-plasmic-override={overrides.artworkFrame5}
                  className={classNames(projectcss.all, sty.artworkFrame5)}
                >
                  <div
                    data-plasmic-name={"featuredIcon5"}
                    data-plasmic-override={overrides.featuredIcon5}
                    className={classNames(projectcss.all, sty.featuredIcon5)}
                  >
                    <div
                      data-plasmic-name={"iconamoonInformationCircle2"}
                      data-plasmic-override={
                        overrides.iconamoonInformationCircle2
                      }
                      className={classNames(
                        projectcss.all,
                        sty.iconamoonInformationCircle2
                      )}
                    >
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__rmka5)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame5"}
                  data-plasmic-override={overrides.textFrame5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xza9I
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__avDcE
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames(projectcss.all, sty.button3)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2
                      )}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames(projectcss.all, sty.button4)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content2"}
                      data-plasmic-override={overrides.content2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content2)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"heart2"}
                          data-plasmic-override={overrides.heart2}
                          className={classNames(projectcss.all, sty.heart2)}
                        >
                          {false ? (
                            <OutlinedIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___77LYt
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <FilledIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sHy9
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7TQd7
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"chevronDownSmall2"}
                          data-plasmic-override={overrides.chevronDownSmall2}
                          className={classNames(
                            projectcss.all,
                            sty.chevronDownSmall2
                          )}
                        >
                          {false ? (
                            <Outlined2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yodPh
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <Outlined2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5Nwyn
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </Stack__>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default8"}
              data-plasmic-override={overrides.property1Default8}
              className={classNames(projectcss.all, sty.property1Default8)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowTextButtonBadgePositive"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowTextButtonBadgePositive
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowTextButtonBadgePositive
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner8"}
                data-plasmic-override={overrides.banner8}
                className={classNames(projectcss.all, sty.banner8)}
              >
                <div
                  data-plasmic-name={"artworkFrame8"}
                  data-plasmic-override={overrides.artworkFrame8}
                  className={classNames(projectcss.all, sty.artworkFrame8)}
                >
                  <div
                    data-plasmic-name={"featuredIcon8"}
                    data-plasmic-override={overrides.featuredIcon8}
                    className={classNames(projectcss.all, sty.featuredIcon8)}
                  >
                    <CheckCircleIcon
                      className={classNames(projectcss.all, sty.svg___0Z0YG)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame8"}
                  data-plasmic-override={overrides.textFrame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame8)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yyXk1
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fckGh
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames(projectcss.all, sty.button5)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3
                      )}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames(projectcss.all, sty.button6)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content3"}
                      data-plasmic-override={overrides.content3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content3)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"heart3"}
                          data-plasmic-override={overrides.heart3}
                          className={classNames(projectcss.all, sty.heart3)}
                        >
                          {false ? (
                            <OutlinedIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jiErD
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <FilledIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sCIl
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Mehx
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"chevronDownSmall3"}
                          data-plasmic-override={overrides.chevronDownSmall3}
                          className={classNames(
                            projectcss.all,
                            sty.chevronDownSmall3
                          )}
                        >
                          {false ? (
                            <Outlined2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8V8P
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <Outlined2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__naBpf
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </Stack__>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default3"}
              data-plasmic-override={overrides.property1Default3}
              className={classNames(projectcss.all, sty.property1Default3)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowIconButtonBadgeWarning"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowIconButtonBadgeWarning
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowIconButtonBadgeWarning
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner3"}
                data-plasmic-override={overrides.banner3}
                className={classNames(projectcss.all, sty.banner3)}
              >
                <div
                  data-plasmic-name={"artworkFrame3"}
                  data-plasmic-override={overrides.artworkFrame3}
                  className={classNames(projectcss.all, sty.artworkFrame3)}
                >
                  <div
                    data-plasmic-name={"featuredIcon3"}
                    data-plasmic-override={overrides.featuredIcon3}
                    className={classNames(projectcss.all, sty.featuredIcon3)}
                  >
                    <AlertTriangleIcon
                      className={classNames(projectcss.all, sty.svg__cbLg0)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame3"}
                  data-plasmic-override={overrides.textFrame3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___021Y
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e4Ekt
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button7"}
                  data-plasmic-override={overrides.button7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button7)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth
                      )}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon"}
                    data-plasmic-override={overrides.icon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon)}
                  >
                    <div
                      data-plasmic-name={"x"}
                      data-plasmic-override={overrides.x}
                      className={classNames(projectcss.all, sty.x)}
                    >
                      {false ? (
                        <Outlined3Icon
                          className={classNames(projectcss.all, sty.svg__nZ7Oz)}
                          role={"img"}
                        />
                      ) : null}
                      <Outlined3Icon
                        className={classNames(projectcss.all, sty.svg__vHkm)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(projectcss.all, sty.label)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseTypographyLabelXSmall"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseTypographyLabelXSmall
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseTypographyLabelXSmall
                          )}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jGikG
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"spacer"}
                          data-plasmic-override={overrides.spacer}
                          className={classNames(projectcss.all, sty.spacer)}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default6"}
              data-plasmic-override={overrides.property1Default6}
              className={classNames(projectcss.all, sty.property1Default6)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowIconButtonBadgeNegative"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowIconButtonBadgeNegative
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowIconButtonBadgeNegative
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner6"}
                data-plasmic-override={overrides.banner6}
                className={classNames(projectcss.all, sty.banner6)}
              >
                <div
                  data-plasmic-name={"artworkFrame6"}
                  data-plasmic-override={overrides.artworkFrame6}
                  className={classNames(projectcss.all, sty.artworkFrame6)}
                >
                  <div
                    data-plasmic-name={"featuredIcon6"}
                    data-plasmic-override={overrides.featuredIcon6}
                    className={classNames(projectcss.all, sty.featuredIcon6)}
                  >
                    <MiCircleErrorIcon
                      className={classNames(projectcss.all, sty.svg__nsL3C)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame6"}
                  data-plasmic-override={overrides.textFrame6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n85Im
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tZ8
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button10"}
                  data-plasmic-override={overrides.button10}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button10)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2
                      )}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon2"}
                    data-plasmic-override={overrides.icon2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon2)}
                  >
                    <div
                      data-plasmic-name={"x2"}
                      data-plasmic-override={overrides.x2}
                      className={classNames(projectcss.all, sty.x2)}
                    >
                      {false ? (
                        <Outlined3Icon
                          className={classNames(projectcss.all, sty.svg__yePfx)}
                          role={"img"}
                        />
                      ) : null}
                      <Outlined3Icon
                        className={classNames(projectcss.all, sty.svg__tn26V)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"label2"}
                      data-plasmic-override={overrides.label2}
                      className={classNames(projectcss.all, sty.label2)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseTypographyLabelXSmall2"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseTypographyLabelXSmall2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseTypographyLabelXSmall2
                          )}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aIv1W
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"spacer2"}
                          data-plasmic-override={overrides.spacer2}
                          className={classNames(projectcss.all, sty.spacer2)}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default9"}
              data-plasmic-override={overrides.property1Default9}
              className={classNames(projectcss.all, sty.property1Default9)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowIconButtonBadgeAccent"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowIconButtonBadgeAccent
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowIconButtonBadgeAccent
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner9"}
                data-plasmic-override={overrides.banner9}
                className={classNames(projectcss.all, sty.banner9)}
              >
                <div
                  data-plasmic-name={"artworkFrame9"}
                  data-plasmic-override={overrides.artworkFrame9}
                  className={classNames(projectcss.all, sty.artworkFrame9)}
                >
                  <div
                    data-plasmic-name={"featuredIcon9"}
                    data-plasmic-override={overrides.featuredIcon9}
                    className={classNames(projectcss.all, sty.featuredIcon9)}
                  >
                    <div
                      data-plasmic-name={"iconamoonInformationCircle3"}
                      data-plasmic-override={
                        overrides.iconamoonInformationCircle3
                      }
                      className={classNames(
                        projectcss.all,
                        sty.iconamoonInformationCircle3
                      )}
                    >
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__vmsI8)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame9"}
                  data-plasmic-override={overrides.textFrame9}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame9)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fya1B
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__moPa9
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonCircleSmallTertiaryIconOnlyEnabled"}
                  data-plasmic-override={
                    overrides.buttonCircleSmallTertiaryIconOnlyEnabled
                  }
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.buttonCircleSmallTertiaryIconOnlyEnabled
                  )}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3
                      )}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon3"}
                    data-plasmic-override={overrides.icon3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon3)}
                  >
                    <div
                      data-plasmic-name={"x3"}
                      data-plasmic-override={overrides.x3}
                      className={classNames(projectcss.all, sty.x3)}
                    >
                      {false ? (
                        <Outlined3Icon
                          className={classNames(projectcss.all, sty.svg__p8Kzv)}
                          role={"img"}
                        />
                      ) : null}
                      <Outlined3Icon
                        className={classNames(projectcss.all, sty.svg___52Tk3)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"label3"}
                      data-plasmic-override={overrides.label3}
                      className={classNames(projectcss.all, sty.label3)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseTypographyLabelXSmall3"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseTypographyLabelXSmall3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseTypographyLabelXSmall3
                          )}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rPiA
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"spacer3"}
                          data-plasmic-override={overrides.spacer3}
                          className={classNames(projectcss.all, sty.spacer3)}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default12"}
              data-plasmic-override={overrides.property1Default12}
              className={classNames(projectcss.all, sty.property1Default12)}
            >
              {false ? (
                <div
                  data-plasmic-name={
                    "signedByBaseBannerLowIconButtonBadgePositive"
                  }
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowIconButtonBadgePositive
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowIconButtonBadgePositive
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner12"}
                data-plasmic-override={overrides.banner12}
                className={classNames(projectcss.all, sty.banner12)}
              >
                <div
                  data-plasmic-name={"artworkFrame12"}
                  data-plasmic-override={overrides.artworkFrame12}
                  className={classNames(projectcss.all, sty.artworkFrame12)}
                >
                  <div
                    data-plasmic-name={"featuredIcon12"}
                    data-plasmic-override={overrides.featuredIcon12}
                    className={classNames(projectcss.all, sty.featuredIcon12)}
                  >
                    <CheckCircleIcon
                      className={classNames(projectcss.all, sty.svg__f6PNd)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame12"}
                  data-plasmic-override={overrides.textFrame12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame12)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bUVQ
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3KIrq
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={
                    "buttonCircleSmallTertiaryIconOnlyEnabled2"
                  }
                  data-plasmic-override={
                    overrides.buttonCircleSmallTertiaryIconOnlyEnabled2
                  }
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.buttonCircleSmallTertiaryIconOnlyEnabled2
                  )}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4
                      )}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon4"}
                    data-plasmic-override={overrides.icon4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon4)}
                  >
                    <div
                      data-plasmic-name={"x4"}
                      data-plasmic-override={overrides.x4}
                      className={classNames(projectcss.all, sty.x4)}
                    >
                      {false ? (
                        <Outlined3Icon
                          className={classNames(projectcss.all, sty.svg__yb8DO)}
                          role={"img"}
                        />
                      ) : null}
                      <Outlined3Icon
                        className={classNames(projectcss.all, sty.svg__uwuC8)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"label4"}
                      data-plasmic-override={overrides.label4}
                      className={classNames(projectcss.all, sty.label4)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseTypographyLabelXSmall4"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseTypographyLabelXSmall4
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseTypographyLabelXSmall4
                          )}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___32FHm
                        )}
                      >
                        {"Label"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"spacer4"}
                          data-plasmic-override={overrides.spacer4}
                          className={classNames(projectcss.all, sty.spacer4)}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default"}
              data-plasmic-override={overrides.property1Default}
              className={classNames(projectcss.all, sty.property1Default)}
            >
              {false ? (
                <div
                  data-plasmic-name={"signedByBaseBannerLowSimpleBadgePositive"}
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowSimpleBadgePositive
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowSimpleBadgePositive
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner"}
                data-plasmic-override={overrides.banner}
                className={classNames(projectcss.all, sty.banner)}
              >
                <div
                  data-plasmic-name={"artworkFrame"}
                  data-plasmic-override={overrides.artworkFrame}
                  className={classNames(projectcss.all, sty.artworkFrame)}
                >
                  <div
                    data-plasmic-name={"featuredIcon"}
                    data-plasmic-override={overrides.featuredIcon}
                    className={classNames(projectcss.all, sty.featuredIcon)}
                  >
                    <CheckCircleIcon
                      className={classNames(projectcss.all, sty.svg__xNvhe)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame"}
                  data-plasmic-override={overrides.textFrame}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jQf4
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w2IpL
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default4"}
              data-plasmic-override={overrides.property1Default4}
              className={classNames(projectcss.all, sty.property1Default4)}
            >
              {false ? (
                <div
                  data-plasmic-name={"signedByBaseBannerLowSimpleBadgeAccent"}
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowSimpleBadgeAccent
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowSimpleBadgeAccent
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner4"}
                data-plasmic-override={overrides.banner4}
                className={classNames(projectcss.all, sty.banner4)}
              >
                <div
                  data-plasmic-name={"artworkFrame4"}
                  data-plasmic-override={overrides.artworkFrame4}
                  className={classNames(projectcss.all, sty.artworkFrame4)}
                >
                  <div
                    data-plasmic-name={"featuredIcon4"}
                    data-plasmic-override={overrides.featuredIcon4}
                    className={classNames(projectcss.all, sty.featuredIcon4)}
                  >
                    <div
                      data-plasmic-name={"iconamoonInformationCircle"}
                      data-plasmic-override={
                        overrides.iconamoonInformationCircle
                      }
                      className={classNames(
                        projectcss.all,
                        sty.iconamoonInformationCircle
                      )}
                    >
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__gYv0C)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame4"}
                  data-plasmic-override={overrides.textFrame4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2Zv8I
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cSfiD
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default7"}
              data-plasmic-override={overrides.property1Default7}
              className={classNames(projectcss.all, sty.property1Default7)}
            >
              {false ? (
                <div
                  data-plasmic-name={"signedByBaseBannerLowSimpleBadgeNegative"}
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowSimpleBadgeNegative
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowSimpleBadgeNegative
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner7"}
                data-plasmic-override={overrides.banner7}
                className={classNames(projectcss.all, sty.banner7)}
              >
                <div
                  data-plasmic-name={"artworkFrame7"}
                  data-plasmic-override={overrides.artworkFrame7}
                  className={classNames(projectcss.all, sty.artworkFrame7)}
                >
                  <div
                    data-plasmic-name={"featuredIcon7"}
                    data-plasmic-override={overrides.featuredIcon7}
                    className={classNames(projectcss.all, sty.featuredIcon7)}
                  >
                    <MiCircleErrorIcon
                      className={classNames(projectcss.all, sty.svg__uButc)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame7"}
                  data-plasmic-override={overrides.textFrame7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4NIj1
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9UrAp
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"property1Default10"}
              data-plasmic-override={overrides.property1Default10}
              className={classNames(projectcss.all, sty.property1Default10)}
            >
              {false ? (
                <div
                  data-plasmic-name={"signedByBaseBannerLowSimpleBadgeWarning"}
                  data-plasmic-override={
                    overrides.signedByBaseBannerLowSimpleBadgeWarning
                  }
                  className={classNames(
                    projectcss.all,
                    sty.signedByBaseBannerLowSimpleBadgeWarning
                  )}
                />
              ) : null}
              <div
                data-plasmic-name={"banner10"}
                data-plasmic-override={overrides.banner10}
                className={classNames(projectcss.all, sty.banner10)}
              >
                <div
                  data-plasmic-name={"artworkFrame10"}
                  data-plasmic-override={overrides.artworkFrame10}
                  className={classNames(projectcss.all, sty.artworkFrame10)}
                >
                  <div
                    data-plasmic-name={"featuredIcon10"}
                    data-plasmic-override={overrides.featuredIcon10}
                    className={classNames(projectcss.all, sty.featuredIcon10)}
                  >
                    <AlertTriangleIcon
                      className={classNames(projectcss.all, sty.svg__uvGLy)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textFrame10"}
                  data-plasmic-override={overrides.textFrame10}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textFrame10)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__db7UG
                    )}
                  >
                    {"Headline text"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ntcoI
                    )}
                  >
                    {"Paragraph text"}
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"importanceStatus"}
            data-plasmic-override={overrides.importanceStatus}
            className={classNames(projectcss.all, sty.importanceStatus)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"importanceStatusBlanc"}
              data-plasmic-override={overrides.importanceStatusBlanc}
              hasGap={true}
              className={classNames(projectcss.all, sty.importanceStatusBlanc)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ldZ52
                )}
              >
                {"Code Blanc"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"importanceStatusOrange"}
              data-plasmic-override={overrides.importanceStatusOrange}
              hasGap={true}
              className={classNames(projectcss.all, sty.importanceStatusOrange)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fm3I2
                )}
              >
                {"Code Orange"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"importanceStatusJaune"}
              data-plasmic-override={overrides.importanceStatusJaune}
              hasGap={true}
              className={classNames(projectcss.all, sty.importanceStatusJaune)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jZd0O
                )}
              >
                {"Code Jaune"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"importanceStatusNoir"}
              data-plasmic-override={overrides.importanceStatusNoir}
              hasGap={true}
              className={classNames(projectcss.all, sty.importanceStatusNoir)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cp5Iy
                )}
              >
                {"Code Noir"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"importanceStatusRouge"}
              data-plasmic-override={overrides.importanceStatusRouge}
              hasGap={true}
              className={classNames(projectcss.all, sty.importanceStatusRouge)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ljNvG
                )}
              >
                {"Code Rouge"}
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "systemIcons2",
    "stateWarning",
    "stateError",
    "stateInfo",
    "iconamoonInformationCircle4",
    "stateSuccess",
    "systemBanners",
    "property1Default11",
    "signedByBaseBannerLowTextButtonBadgeWarning",
    "banner11",
    "artworkFrame11",
    "featuredIcon11",
    "textFrame11",
    "button8",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4",
    "button9",
    "content4",
    "heart4",
    "chevronDownSmall4",
    "property1Default2",
    "signedByBaseBannerLowTextButtonBadgeNegative",
    "banner2",
    "artworkFrame2",
    "featuredIcon2",
    "textFrame2",
    "button",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth",
    "button2",
    "content",
    "heart",
    "chevronDownSmall",
    "property1Default5",
    "signedByBaseBannerLowTextButtonBadgeAccent",
    "banner5",
    "artworkFrame5",
    "featuredIcon5",
    "iconamoonInformationCircle2",
    "textFrame5",
    "button3",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2",
    "button4",
    "content2",
    "heart2",
    "chevronDownSmall2",
    "property1Default8",
    "signedByBaseBannerLowTextButtonBadgePositive",
    "banner8",
    "artworkFrame8",
    "featuredIcon8",
    "textFrame8",
    "button5",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3",
    "button6",
    "content3",
    "heart3",
    "chevronDownSmall3",
    "property1Default3",
    "signedByBaseBannerLowIconButtonBadgeWarning",
    "banner3",
    "artworkFrame3",
    "featuredIcon3",
    "textFrame3",
    "button7",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth",
    "icon",
    "x",
    "label",
    "signedByBaseTypographyLabelXSmall",
    "spacer",
    "property1Default6",
    "signedByBaseBannerLowIconButtonBadgeNegative",
    "banner6",
    "artworkFrame6",
    "featuredIcon6",
    "textFrame6",
    "button10",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2",
    "icon2",
    "x2",
    "label2",
    "signedByBaseTypographyLabelXSmall2",
    "spacer2",
    "property1Default9",
    "signedByBaseBannerLowIconButtonBadgeAccent",
    "banner9",
    "artworkFrame9",
    "featuredIcon9",
    "iconamoonInformationCircle3",
    "textFrame9",
    "buttonCircleSmallTertiaryIconOnlyEnabled",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3",
    "icon3",
    "x3",
    "label3",
    "signedByBaseTypographyLabelXSmall3",
    "spacer3",
    "property1Default12",
    "signedByBaseBannerLowIconButtonBadgePositive",
    "banner12",
    "artworkFrame12",
    "featuredIcon12",
    "textFrame12",
    "buttonCircleSmallTertiaryIconOnlyEnabled2",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4",
    "icon4",
    "x4",
    "label4",
    "signedByBaseTypographyLabelXSmall4",
    "spacer4",
    "property1Default",
    "signedByBaseBannerLowSimpleBadgePositive",
    "banner",
    "artworkFrame",
    "featuredIcon",
    "textFrame",
    "property1Default4",
    "signedByBaseBannerLowSimpleBadgeAccent",
    "banner4",
    "artworkFrame4",
    "featuredIcon4",
    "iconamoonInformationCircle",
    "textFrame4",
    "property1Default7",
    "signedByBaseBannerLowSimpleBadgeNegative",
    "banner7",
    "artworkFrame7",
    "featuredIcon7",
    "textFrame7",
    "property1Default10",
    "signedByBaseBannerLowSimpleBadgeWarning",
    "banner10",
    "artworkFrame10",
    "featuredIcon10",
    "textFrame10",
    "importanceStatus",
    "importanceStatusBlanc",
    "importanceStatusOrange",
    "importanceStatusJaune",
    "importanceStatusNoir",
    "importanceStatusRouge"
  ],
  systemIcons2: [
    "systemIcons2",
    "stateWarning",
    "stateError",
    "stateInfo",
    "iconamoonInformationCircle4",
    "stateSuccess"
  ],
  stateWarning: ["stateWarning"],
  stateError: ["stateError"],
  stateInfo: ["stateInfo", "iconamoonInformationCircle4"],
  iconamoonInformationCircle4: ["iconamoonInformationCircle4"],
  stateSuccess: ["stateSuccess"],
  systemBanners: [
    "systemBanners",
    "property1Default11",
    "signedByBaseBannerLowTextButtonBadgeWarning",
    "banner11",
    "artworkFrame11",
    "featuredIcon11",
    "textFrame11",
    "button8",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4",
    "button9",
    "content4",
    "heart4",
    "chevronDownSmall4",
    "property1Default2",
    "signedByBaseBannerLowTextButtonBadgeNegative",
    "banner2",
    "artworkFrame2",
    "featuredIcon2",
    "textFrame2",
    "button",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth",
    "button2",
    "content",
    "heart",
    "chevronDownSmall",
    "property1Default5",
    "signedByBaseBannerLowTextButtonBadgeAccent",
    "banner5",
    "artworkFrame5",
    "featuredIcon5",
    "iconamoonInformationCircle2",
    "textFrame5",
    "button3",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2",
    "button4",
    "content2",
    "heart2",
    "chevronDownSmall2",
    "property1Default8",
    "signedByBaseBannerLowTextButtonBadgePositive",
    "banner8",
    "artworkFrame8",
    "featuredIcon8",
    "textFrame8",
    "button5",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3",
    "button6",
    "content3",
    "heart3",
    "chevronDownSmall3",
    "property1Default3",
    "signedByBaseBannerLowIconButtonBadgeWarning",
    "banner3",
    "artworkFrame3",
    "featuredIcon3",
    "textFrame3",
    "button7",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth",
    "icon",
    "x",
    "label",
    "signedByBaseTypographyLabelXSmall",
    "spacer",
    "property1Default6",
    "signedByBaseBannerLowIconButtonBadgeNegative",
    "banner6",
    "artworkFrame6",
    "featuredIcon6",
    "textFrame6",
    "button10",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2",
    "icon2",
    "x2",
    "label2",
    "signedByBaseTypographyLabelXSmall2",
    "spacer2",
    "property1Default9",
    "signedByBaseBannerLowIconButtonBadgeAccent",
    "banner9",
    "artworkFrame9",
    "featuredIcon9",
    "iconamoonInformationCircle3",
    "textFrame9",
    "buttonCircleSmallTertiaryIconOnlyEnabled",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3",
    "icon3",
    "x3",
    "label3",
    "signedByBaseTypographyLabelXSmall3",
    "spacer3",
    "property1Default12",
    "signedByBaseBannerLowIconButtonBadgePositive",
    "banner12",
    "artworkFrame12",
    "featuredIcon12",
    "textFrame12",
    "buttonCircleSmallTertiaryIconOnlyEnabled2",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4",
    "icon4",
    "x4",
    "label4",
    "signedByBaseTypographyLabelXSmall4",
    "spacer4",
    "property1Default",
    "signedByBaseBannerLowSimpleBadgePositive",
    "banner",
    "artworkFrame",
    "featuredIcon",
    "textFrame",
    "property1Default4",
    "signedByBaseBannerLowSimpleBadgeAccent",
    "banner4",
    "artworkFrame4",
    "featuredIcon4",
    "iconamoonInformationCircle",
    "textFrame4",
    "property1Default7",
    "signedByBaseBannerLowSimpleBadgeNegative",
    "banner7",
    "artworkFrame7",
    "featuredIcon7",
    "textFrame7",
    "property1Default10",
    "signedByBaseBannerLowSimpleBadgeWarning",
    "banner10",
    "artworkFrame10",
    "featuredIcon10",
    "textFrame10"
  ],
  property1Default11: [
    "property1Default11",
    "signedByBaseBannerLowTextButtonBadgeWarning",
    "banner11",
    "artworkFrame11",
    "featuredIcon11",
    "textFrame11",
    "button8",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4",
    "button9",
    "content4",
    "heart4",
    "chevronDownSmall4"
  ],
  signedByBaseBannerLowTextButtonBadgeWarning: [
    "signedByBaseBannerLowTextButtonBadgeWarning"
  ],
  banner11: [
    "banner11",
    "artworkFrame11",
    "featuredIcon11",
    "textFrame11",
    "button8",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4",
    "button9",
    "content4",
    "heart4",
    "chevronDownSmall4"
  ],
  artworkFrame11: ["artworkFrame11", "featuredIcon11"],
  featuredIcon11: ["featuredIcon11"],
  textFrame11: ["textFrame11"],
  button8: [
    "button8",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4",
    "button9",
    "content4",
    "heart4",
    "chevronDownSmall4"
  ],
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4: [
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4"
  ],
  button9: ["button9", "content4", "heart4", "chevronDownSmall4"],
  content4: ["content4", "heart4", "chevronDownSmall4"],
  heart4: ["heart4"],
  chevronDownSmall4: ["chevronDownSmall4"],
  property1Default2: [
    "property1Default2",
    "signedByBaseBannerLowTextButtonBadgeNegative",
    "banner2",
    "artworkFrame2",
    "featuredIcon2",
    "textFrame2",
    "button",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth",
    "button2",
    "content",
    "heart",
    "chevronDownSmall"
  ],
  signedByBaseBannerLowTextButtonBadgeNegative: [
    "signedByBaseBannerLowTextButtonBadgeNegative"
  ],
  banner2: [
    "banner2",
    "artworkFrame2",
    "featuredIcon2",
    "textFrame2",
    "button",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth",
    "button2",
    "content",
    "heart",
    "chevronDownSmall"
  ],
  artworkFrame2: ["artworkFrame2", "featuredIcon2"],
  featuredIcon2: ["featuredIcon2"],
  textFrame2: ["textFrame2"],
  button: [
    "button",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth",
    "button2",
    "content",
    "heart",
    "chevronDownSmall"
  ],
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth: [
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth"
  ],
  button2: ["button2", "content", "heart", "chevronDownSmall"],
  content: ["content", "heart", "chevronDownSmall"],
  heart: ["heart"],
  chevronDownSmall: ["chevronDownSmall"],
  property1Default5: [
    "property1Default5",
    "signedByBaseBannerLowTextButtonBadgeAccent",
    "banner5",
    "artworkFrame5",
    "featuredIcon5",
    "iconamoonInformationCircle2",
    "textFrame5",
    "button3",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2",
    "button4",
    "content2",
    "heart2",
    "chevronDownSmall2"
  ],
  signedByBaseBannerLowTextButtonBadgeAccent: [
    "signedByBaseBannerLowTextButtonBadgeAccent"
  ],
  banner5: [
    "banner5",
    "artworkFrame5",
    "featuredIcon5",
    "iconamoonInformationCircle2",
    "textFrame5",
    "button3",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2",
    "button4",
    "content2",
    "heart2",
    "chevronDownSmall2"
  ],
  artworkFrame5: [
    "artworkFrame5",
    "featuredIcon5",
    "iconamoonInformationCircle2"
  ],
  featuredIcon5: ["featuredIcon5", "iconamoonInformationCircle2"],
  iconamoonInformationCircle2: ["iconamoonInformationCircle2"],
  textFrame5: ["textFrame5"],
  button3: [
    "button3",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2",
    "button4",
    "content2",
    "heart2",
    "chevronDownSmall2"
  ],
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2: [
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2"
  ],
  button4: ["button4", "content2", "heart2", "chevronDownSmall2"],
  content2: ["content2", "heart2", "chevronDownSmall2"],
  heart2: ["heart2"],
  chevronDownSmall2: ["chevronDownSmall2"],
  property1Default8: [
    "property1Default8",
    "signedByBaseBannerLowTextButtonBadgePositive",
    "banner8",
    "artworkFrame8",
    "featuredIcon8",
    "textFrame8",
    "button5",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3",
    "button6",
    "content3",
    "heart3",
    "chevronDownSmall3"
  ],
  signedByBaseBannerLowTextButtonBadgePositive: [
    "signedByBaseBannerLowTextButtonBadgePositive"
  ],
  banner8: [
    "banner8",
    "artworkFrame8",
    "featuredIcon8",
    "textFrame8",
    "button5",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3",
    "button6",
    "content3",
    "heart3",
    "chevronDownSmall3"
  ],
  artworkFrame8: ["artworkFrame8", "featuredIcon8"],
  featuredIcon8: ["featuredIcon8"],
  textFrame8: ["textFrame8"],
  button5: [
    "button5",
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3",
    "button6",
    "content3",
    "heart3",
    "chevronDownSmall3"
  ],
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3: [
    "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3"
  ],
  button6: ["button6", "content3", "heart3", "chevronDownSmall3"],
  content3: ["content3", "heart3", "chevronDownSmall3"],
  heart3: ["heart3"],
  chevronDownSmall3: ["chevronDownSmall3"],
  property1Default3: [
    "property1Default3",
    "signedByBaseBannerLowIconButtonBadgeWarning",
    "banner3",
    "artworkFrame3",
    "featuredIcon3",
    "textFrame3",
    "button7",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth",
    "icon",
    "x",
    "label",
    "signedByBaseTypographyLabelXSmall",
    "spacer"
  ],
  signedByBaseBannerLowIconButtonBadgeWarning: [
    "signedByBaseBannerLowIconButtonBadgeWarning"
  ],
  banner3: [
    "banner3",
    "artworkFrame3",
    "featuredIcon3",
    "textFrame3",
    "button7",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth",
    "icon",
    "x",
    "label",
    "signedByBaseTypographyLabelXSmall",
    "spacer"
  ],
  artworkFrame3: ["artworkFrame3", "featuredIcon3"],
  featuredIcon3: ["featuredIcon3"],
  textFrame3: ["textFrame3"],
  button7: [
    "button7",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth",
    "icon",
    "x",
    "label",
    "signedByBaseTypographyLabelXSmall",
    "spacer"
  ],
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth: [
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth"
  ],
  icon: ["icon", "x"],
  x: ["x"],
  label: ["label", "signedByBaseTypographyLabelXSmall", "spacer"],
  signedByBaseTypographyLabelXSmall: ["signedByBaseTypographyLabelXSmall"],
  spacer: ["spacer"],
  property1Default6: [
    "property1Default6",
    "signedByBaseBannerLowIconButtonBadgeNegative",
    "banner6",
    "artworkFrame6",
    "featuredIcon6",
    "textFrame6",
    "button10",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2",
    "icon2",
    "x2",
    "label2",
    "signedByBaseTypographyLabelXSmall2",
    "spacer2"
  ],
  signedByBaseBannerLowIconButtonBadgeNegative: [
    "signedByBaseBannerLowIconButtonBadgeNegative"
  ],
  banner6: [
    "banner6",
    "artworkFrame6",
    "featuredIcon6",
    "textFrame6",
    "button10",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2",
    "icon2",
    "x2",
    "label2",
    "signedByBaseTypographyLabelXSmall2",
    "spacer2"
  ],
  artworkFrame6: ["artworkFrame6", "featuredIcon6"],
  featuredIcon6: ["featuredIcon6"],
  textFrame6: ["textFrame6"],
  button10: [
    "button10",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2",
    "icon2",
    "x2",
    "label2",
    "signedByBaseTypographyLabelXSmall2",
    "spacer2"
  ],
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2: [
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2"
  ],
  icon2: ["icon2", "x2"],
  x2: ["x2"],
  label2: ["label2", "signedByBaseTypographyLabelXSmall2", "spacer2"],
  signedByBaseTypographyLabelXSmall2: ["signedByBaseTypographyLabelXSmall2"],
  spacer2: ["spacer2"],
  property1Default9: [
    "property1Default9",
    "signedByBaseBannerLowIconButtonBadgeAccent",
    "banner9",
    "artworkFrame9",
    "featuredIcon9",
    "iconamoonInformationCircle3",
    "textFrame9",
    "buttonCircleSmallTertiaryIconOnlyEnabled",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3",
    "icon3",
    "x3",
    "label3",
    "signedByBaseTypographyLabelXSmall3",
    "spacer3"
  ],
  signedByBaseBannerLowIconButtonBadgeAccent: [
    "signedByBaseBannerLowIconButtonBadgeAccent"
  ],
  banner9: [
    "banner9",
    "artworkFrame9",
    "featuredIcon9",
    "iconamoonInformationCircle3",
    "textFrame9",
    "buttonCircleSmallTertiaryIconOnlyEnabled",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3",
    "icon3",
    "x3",
    "label3",
    "signedByBaseTypographyLabelXSmall3",
    "spacer3"
  ],
  artworkFrame9: [
    "artworkFrame9",
    "featuredIcon9",
    "iconamoonInformationCircle3"
  ],
  featuredIcon9: ["featuredIcon9", "iconamoonInformationCircle3"],
  iconamoonInformationCircle3: ["iconamoonInformationCircle3"],
  textFrame9: ["textFrame9"],
  buttonCircleSmallTertiaryIconOnlyEnabled: [
    "buttonCircleSmallTertiaryIconOnlyEnabled",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3",
    "icon3",
    "x3",
    "label3",
    "signedByBaseTypographyLabelXSmall3",
    "spacer3"
  ],
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3: [
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3"
  ],
  icon3: ["icon3", "x3"],
  x3: ["x3"],
  label3: ["label3", "signedByBaseTypographyLabelXSmall3", "spacer3"],
  signedByBaseTypographyLabelXSmall3: ["signedByBaseTypographyLabelXSmall3"],
  spacer3: ["spacer3"],
  property1Default12: [
    "property1Default12",
    "signedByBaseBannerLowIconButtonBadgePositive",
    "banner12",
    "artworkFrame12",
    "featuredIcon12",
    "textFrame12",
    "buttonCircleSmallTertiaryIconOnlyEnabled2",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4",
    "icon4",
    "x4",
    "label4",
    "signedByBaseTypographyLabelXSmall4",
    "spacer4"
  ],
  signedByBaseBannerLowIconButtonBadgePositive: [
    "signedByBaseBannerLowIconButtonBadgePositive"
  ],
  banner12: [
    "banner12",
    "artworkFrame12",
    "featuredIcon12",
    "textFrame12",
    "buttonCircleSmallTertiaryIconOnlyEnabled2",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4",
    "icon4",
    "x4",
    "label4",
    "signedByBaseTypographyLabelXSmall4",
    "spacer4"
  ],
  artworkFrame12: ["artworkFrame12", "featuredIcon12"],
  featuredIcon12: ["featuredIcon12"],
  textFrame12: ["textFrame12"],
  buttonCircleSmallTertiaryIconOnlyEnabled2: [
    "buttonCircleSmallTertiaryIconOnlyEnabled2",
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4",
    "icon4",
    "x4",
    "label4",
    "signedByBaseTypographyLabelXSmall4",
    "spacer4"
  ],
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4: [
    "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4"
  ],
  icon4: ["icon4", "x4"],
  x4: ["x4"],
  label4: ["label4", "signedByBaseTypographyLabelXSmall4", "spacer4"],
  signedByBaseTypographyLabelXSmall4: ["signedByBaseTypographyLabelXSmall4"],
  spacer4: ["spacer4"],
  property1Default: [
    "property1Default",
    "signedByBaseBannerLowSimpleBadgePositive",
    "banner",
    "artworkFrame",
    "featuredIcon",
    "textFrame"
  ],
  signedByBaseBannerLowSimpleBadgePositive: [
    "signedByBaseBannerLowSimpleBadgePositive"
  ],
  banner: ["banner", "artworkFrame", "featuredIcon", "textFrame"],
  artworkFrame: ["artworkFrame", "featuredIcon"],
  featuredIcon: ["featuredIcon"],
  textFrame: ["textFrame"],
  property1Default4: [
    "property1Default4",
    "signedByBaseBannerLowSimpleBadgeAccent",
    "banner4",
    "artworkFrame4",
    "featuredIcon4",
    "iconamoonInformationCircle",
    "textFrame4"
  ],
  signedByBaseBannerLowSimpleBadgeAccent: [
    "signedByBaseBannerLowSimpleBadgeAccent"
  ],
  banner4: [
    "banner4",
    "artworkFrame4",
    "featuredIcon4",
    "iconamoonInformationCircle",
    "textFrame4"
  ],
  artworkFrame4: [
    "artworkFrame4",
    "featuredIcon4",
    "iconamoonInformationCircle"
  ],
  featuredIcon4: ["featuredIcon4", "iconamoonInformationCircle"],
  iconamoonInformationCircle: ["iconamoonInformationCircle"],
  textFrame4: ["textFrame4"],
  property1Default7: [
    "property1Default7",
    "signedByBaseBannerLowSimpleBadgeNegative",
    "banner7",
    "artworkFrame7",
    "featuredIcon7",
    "textFrame7"
  ],
  signedByBaseBannerLowSimpleBadgeNegative: [
    "signedByBaseBannerLowSimpleBadgeNegative"
  ],
  banner7: ["banner7", "artworkFrame7", "featuredIcon7", "textFrame7"],
  artworkFrame7: ["artworkFrame7", "featuredIcon7"],
  featuredIcon7: ["featuredIcon7"],
  textFrame7: ["textFrame7"],
  property1Default10: [
    "property1Default10",
    "signedByBaseBannerLowSimpleBadgeWarning",
    "banner10",
    "artworkFrame10",
    "featuredIcon10",
    "textFrame10"
  ],
  signedByBaseBannerLowSimpleBadgeWarning: [
    "signedByBaseBannerLowSimpleBadgeWarning"
  ],
  banner10: ["banner10", "artworkFrame10", "featuredIcon10", "textFrame10"],
  artworkFrame10: ["artworkFrame10", "featuredIcon10"],
  featuredIcon10: ["featuredIcon10"],
  textFrame10: ["textFrame10"],
  importanceStatus: [
    "importanceStatus",
    "importanceStatusBlanc",
    "importanceStatusOrange",
    "importanceStatusJaune",
    "importanceStatusNoir",
    "importanceStatusRouge"
  ],
  importanceStatusBlanc: ["importanceStatusBlanc"],
  importanceStatusOrange: ["importanceStatusOrange"],
  importanceStatusJaune: ["importanceStatusJaune"],
  importanceStatusNoir: ["importanceStatusNoir"],
  importanceStatusRouge: ["importanceStatusRouge"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  systemIcons2: "div";
  stateWarning: "div";
  stateError: "div";
  stateInfo: "div";
  iconamoonInformationCircle4: "div";
  stateSuccess: "div";
  systemBanners: "div";
  property1Default11: "div";
  signedByBaseBannerLowTextButtonBadgeWarning: "div";
  banner11: "div";
  artworkFrame11: "div";
  featuredIcon11: "div";
  textFrame11: "div";
  button8: "div";
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4: "div";
  button9: "div";
  content4: "div";
  heart4: "div";
  chevronDownSmall4: "div";
  property1Default2: "div";
  signedByBaseBannerLowTextButtonBadgeNegative: "div";
  banner2: "div";
  artworkFrame2: "div";
  featuredIcon2: "div";
  textFrame2: "div";
  button: "div";
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth: "div";
  button2: "div";
  content: "div";
  heart: "div";
  chevronDownSmall: "div";
  property1Default5: "div";
  signedByBaseBannerLowTextButtonBadgeAccent: "div";
  banner5: "div";
  artworkFrame5: "div";
  featuredIcon5: "div";
  iconamoonInformationCircle2: "div";
  textFrame5: "div";
  button3: "div";
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2: "div";
  button4: "div";
  content2: "div";
  heart2: "div";
  chevronDownSmall2: "div";
  property1Default8: "div";
  signedByBaseBannerLowTextButtonBadgePositive: "div";
  banner8: "div";
  artworkFrame8: "div";
  featuredIcon8: "div";
  textFrame8: "div";
  button5: "div";
  signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3: "div";
  button6: "div";
  content3: "div";
  heart3: "div";
  chevronDownSmall3: "div";
  property1Default3: "div";
  signedByBaseBannerLowIconButtonBadgeWarning: "div";
  banner3: "div";
  artworkFrame3: "div";
  featuredIcon3: "div";
  textFrame3: "div";
  button7: "div";
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth: "div";
  icon: "div";
  x: "div";
  label: "div";
  signedByBaseTypographyLabelXSmall: "div";
  spacer: "div";
  property1Default6: "div";
  signedByBaseBannerLowIconButtonBadgeNegative: "div";
  banner6: "div";
  artworkFrame6: "div";
  featuredIcon6: "div";
  textFrame6: "div";
  button10: "div";
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2: "div";
  icon2: "div";
  x2: "div";
  label2: "div";
  signedByBaseTypographyLabelXSmall2: "div";
  spacer2: "div";
  property1Default9: "div";
  signedByBaseBannerLowIconButtonBadgeAccent: "div";
  banner9: "div";
  artworkFrame9: "div";
  featuredIcon9: "div";
  iconamoonInformationCircle3: "div";
  textFrame9: "div";
  buttonCircleSmallTertiaryIconOnlyEnabled: "div";
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3: "div";
  icon3: "div";
  x3: "div";
  label3: "div";
  signedByBaseTypographyLabelXSmall3: "div";
  spacer3: "div";
  property1Default12: "div";
  signedByBaseBannerLowIconButtonBadgePositive: "div";
  banner12: "div";
  artworkFrame12: "div";
  featuredIcon12: "div";
  textFrame12: "div";
  buttonCircleSmallTertiaryIconOnlyEnabled2: "div";
  signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4: "div";
  icon4: "div";
  x4: "div";
  label4: "div";
  signedByBaseTypographyLabelXSmall4: "div";
  spacer4: "div";
  property1Default: "div";
  signedByBaseBannerLowSimpleBadgePositive: "div";
  banner: "div";
  artworkFrame: "div";
  featuredIcon: "div";
  textFrame: "div";
  property1Default4: "div";
  signedByBaseBannerLowSimpleBadgeAccent: "div";
  banner4: "div";
  artworkFrame4: "div";
  featuredIcon4: "div";
  iconamoonInformationCircle: "div";
  textFrame4: "div";
  property1Default7: "div";
  signedByBaseBannerLowSimpleBadgeNegative: "div";
  banner7: "div";
  artworkFrame7: "div";
  featuredIcon7: "div";
  textFrame7: "div";
  property1Default10: "div";
  signedByBaseBannerLowSimpleBadgeWarning: "div";
  banner10: "div";
  artworkFrame10: "div";
  featuredIcon10: "div";
  textFrame10: "div";
  importanceStatus: "div";
  importanceStatusBlanc: "div";
  importanceStatusOrange: "div";
  importanceStatusJaune: "div";
  importanceStatusNoir: "div";
  importanceStatusRouge: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSystemBanners__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSystemBanners__VariantsArgs;
    args?: PlasmicSystemBanners__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSystemBanners__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSystemBanners__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSystemBanners__ArgProps,
          internalVariantPropNames: PlasmicSystemBanners__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSystemBanners__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSystemBanners";
  } else {
    func.displayName = `PlasmicSystemBanners.${nodeName}`;
  }
  return func;
}

export const PlasmicSystemBanners = Object.assign(
  // Top-level PlasmicSystemBanners renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    systemIcons2: makeNodeComponent("systemIcons2"),
    stateWarning: makeNodeComponent("stateWarning"),
    stateError: makeNodeComponent("stateError"),
    stateInfo: makeNodeComponent("stateInfo"),
    iconamoonInformationCircle4: makeNodeComponent(
      "iconamoonInformationCircle4"
    ),
    stateSuccess: makeNodeComponent("stateSuccess"),
    systemBanners: makeNodeComponent("systemBanners"),
    property1Default11: makeNodeComponent("property1Default11"),
    signedByBaseBannerLowTextButtonBadgeWarning: makeNodeComponent(
      "signedByBaseBannerLowTextButtonBadgeWarning"
    ),
    banner11: makeNodeComponent("banner11"),
    artworkFrame11: makeNodeComponent("artworkFrame11"),
    featuredIcon11: makeNodeComponent("featuredIcon11"),
    textFrame11: makeNodeComponent("textFrame11"),
    button8: makeNodeComponent("button8"),
    signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4:
      makeNodeComponent(
        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth4"
      ),
    button9: makeNodeComponent("button9"),
    content4: makeNodeComponent("content4"),
    heart4: makeNodeComponent("heart4"),
    chevronDownSmall4: makeNodeComponent("chevronDownSmall4"),
    property1Default2: makeNodeComponent("property1Default2"),
    signedByBaseBannerLowTextButtonBadgeNegative: makeNodeComponent(
      "signedByBaseBannerLowTextButtonBadgeNegative"
    ),
    banner2: makeNodeComponent("banner2"),
    artworkFrame2: makeNodeComponent("artworkFrame2"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textFrame2: makeNodeComponent("textFrame2"),
    button: makeNodeComponent("button"),
    signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth:
      makeNodeComponent(
        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth"
      ),
    button2: makeNodeComponent("button2"),
    content: makeNodeComponent("content"),
    heart: makeNodeComponent("heart"),
    chevronDownSmall: makeNodeComponent("chevronDownSmall"),
    property1Default5: makeNodeComponent("property1Default5"),
    signedByBaseBannerLowTextButtonBadgeAccent: makeNodeComponent(
      "signedByBaseBannerLowTextButtonBadgeAccent"
    ),
    banner5: makeNodeComponent("banner5"),
    artworkFrame5: makeNodeComponent("artworkFrame5"),
    featuredIcon5: makeNodeComponent("featuredIcon5"),
    iconamoonInformationCircle2: makeNodeComponent(
      "iconamoonInformationCircle2"
    ),
    textFrame5: makeNodeComponent("textFrame5"),
    button3: makeNodeComponent("button3"),
    signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2:
      makeNodeComponent(
        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth2"
      ),
    button4: makeNodeComponent("button4"),
    content2: makeNodeComponent("content2"),
    heart2: makeNodeComponent("heart2"),
    chevronDownSmall2: makeNodeComponent("chevronDownSmall2"),
    property1Default8: makeNodeComponent("property1Default8"),
    signedByBaseBannerLowTextButtonBadgePositive: makeNodeComponent(
      "signedByBaseBannerLowTextButtonBadgePositive"
    ),
    banner8: makeNodeComponent("banner8"),
    artworkFrame8: makeNodeComponent("artworkFrame8"),
    featuredIcon8: makeNodeComponent("featuredIcon8"),
    textFrame8: makeNodeComponent("textFrame8"),
    button5: makeNodeComponent("button5"),
    signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3:
      makeNodeComponent(
        "signedByBaseButtonPillSmallSecondaryLabeledEnabledIntrinsicWidth3"
      ),
    button6: makeNodeComponent("button6"),
    content3: makeNodeComponent("content3"),
    heart3: makeNodeComponent("heart3"),
    chevronDownSmall3: makeNodeComponent("chevronDownSmall3"),
    property1Default3: makeNodeComponent("property1Default3"),
    signedByBaseBannerLowIconButtonBadgeWarning: makeNodeComponent(
      "signedByBaseBannerLowIconButtonBadgeWarning"
    ),
    banner3: makeNodeComponent("banner3"),
    artworkFrame3: makeNodeComponent("artworkFrame3"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textFrame3: makeNodeComponent("textFrame3"),
    button7: makeNodeComponent("button7"),
    signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth:
      makeNodeComponent(
        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth"
      ),
    icon: makeNodeComponent("icon"),
    x: makeNodeComponent("x"),
    label: makeNodeComponent("label"),
    signedByBaseTypographyLabelXSmall: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall"
    ),
    spacer: makeNodeComponent("spacer"),
    property1Default6: makeNodeComponent("property1Default6"),
    signedByBaseBannerLowIconButtonBadgeNegative: makeNodeComponent(
      "signedByBaseBannerLowIconButtonBadgeNegative"
    ),
    banner6: makeNodeComponent("banner6"),
    artworkFrame6: makeNodeComponent("artworkFrame6"),
    featuredIcon6: makeNodeComponent("featuredIcon6"),
    textFrame6: makeNodeComponent("textFrame6"),
    button10: makeNodeComponent("button10"),
    signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2:
      makeNodeComponent(
        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth2"
      ),
    icon2: makeNodeComponent("icon2"),
    x2: makeNodeComponent("x2"),
    label2: makeNodeComponent("label2"),
    signedByBaseTypographyLabelXSmall2: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall2"
    ),
    spacer2: makeNodeComponent("spacer2"),
    property1Default9: makeNodeComponent("property1Default9"),
    signedByBaseBannerLowIconButtonBadgeAccent: makeNodeComponent(
      "signedByBaseBannerLowIconButtonBadgeAccent"
    ),
    banner9: makeNodeComponent("banner9"),
    artworkFrame9: makeNodeComponent("artworkFrame9"),
    featuredIcon9: makeNodeComponent("featuredIcon9"),
    iconamoonInformationCircle3: makeNodeComponent(
      "iconamoonInformationCircle3"
    ),
    textFrame9: makeNodeComponent("textFrame9"),
    buttonCircleSmallTertiaryIconOnlyEnabled: makeNodeComponent(
      "buttonCircleSmallTertiaryIconOnlyEnabled"
    ),
    signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3:
      makeNodeComponent(
        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth3"
      ),
    icon3: makeNodeComponent("icon3"),
    x3: makeNodeComponent("x3"),
    label3: makeNodeComponent("label3"),
    signedByBaseTypographyLabelXSmall3: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall3"
    ),
    spacer3: makeNodeComponent("spacer3"),
    property1Default12: makeNodeComponent("property1Default12"),
    signedByBaseBannerLowIconButtonBadgePositive: makeNodeComponent(
      "signedByBaseBannerLowIconButtonBadgePositive"
    ),
    banner12: makeNodeComponent("banner12"),
    artworkFrame12: makeNodeComponent("artworkFrame12"),
    featuredIcon12: makeNodeComponent("featuredIcon12"),
    textFrame12: makeNodeComponent("textFrame12"),
    buttonCircleSmallTertiaryIconOnlyEnabled2: makeNodeComponent(
      "buttonCircleSmallTertiaryIconOnlyEnabled2"
    ),
    signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4:
      makeNodeComponent(
        "signedByBaseButtonCircleSmallTertiaryIconOnlyEnabledFixedWidth4"
      ),
    icon4: makeNodeComponent("icon4"),
    x4: makeNodeComponent("x4"),
    label4: makeNodeComponent("label4"),
    signedByBaseTypographyLabelXSmall4: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall4"
    ),
    spacer4: makeNodeComponent("spacer4"),
    property1Default: makeNodeComponent("property1Default"),
    signedByBaseBannerLowSimpleBadgePositive: makeNodeComponent(
      "signedByBaseBannerLowSimpleBadgePositive"
    ),
    banner: makeNodeComponent("banner"),
    artworkFrame: makeNodeComponent("artworkFrame"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textFrame: makeNodeComponent("textFrame"),
    property1Default4: makeNodeComponent("property1Default4"),
    signedByBaseBannerLowSimpleBadgeAccent: makeNodeComponent(
      "signedByBaseBannerLowSimpleBadgeAccent"
    ),
    banner4: makeNodeComponent("banner4"),
    artworkFrame4: makeNodeComponent("artworkFrame4"),
    featuredIcon4: makeNodeComponent("featuredIcon4"),
    iconamoonInformationCircle: makeNodeComponent("iconamoonInformationCircle"),
    textFrame4: makeNodeComponent("textFrame4"),
    property1Default7: makeNodeComponent("property1Default7"),
    signedByBaseBannerLowSimpleBadgeNegative: makeNodeComponent(
      "signedByBaseBannerLowSimpleBadgeNegative"
    ),
    banner7: makeNodeComponent("banner7"),
    artworkFrame7: makeNodeComponent("artworkFrame7"),
    featuredIcon7: makeNodeComponent("featuredIcon7"),
    textFrame7: makeNodeComponent("textFrame7"),
    property1Default10: makeNodeComponent("property1Default10"),
    signedByBaseBannerLowSimpleBadgeWarning: makeNodeComponent(
      "signedByBaseBannerLowSimpleBadgeWarning"
    ),
    banner10: makeNodeComponent("banner10"),
    artworkFrame10: makeNodeComponent("artworkFrame10"),
    featuredIcon10: makeNodeComponent("featuredIcon10"),
    textFrame10: makeNodeComponent("textFrame10"),
    importanceStatus: makeNodeComponent("importanceStatus"),
    importanceStatusBlanc: makeNodeComponent("importanceStatusBlanc"),
    importanceStatusOrange: makeNodeComponent("importanceStatusOrange"),
    importanceStatusJaune: makeNodeComponent("importanceStatusJaune"),
    importanceStatusNoir: makeNodeComponent("importanceStatusNoir"),
    importanceStatusRouge: makeNodeComponent("importanceStatusRouge"),

    // Metadata about props expected for PlasmicSystemBanners
    internalVariantProps: PlasmicSystemBanners__VariantProps,
    internalArgProps: PlasmicSystemBanners__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSystemBanners;
/* prettier-ignore-end */
