// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: pfhJGwKJL8HB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicToastModal.module.css"; // plasmic-import: pfhJGwKJL8HB/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: SVMdFZ3jIWyb/icon
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle"; // plasmic-import: lEvXwfHpddbD/icon
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: Ftr2IKNRll04/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: jrYkd80iRUMm/icon

createPlasmicElementProxy;

export type PlasmicToastModal__VariantMembers = {};
export type PlasmicToastModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicToastModal__VariantsArgs;
export const PlasmicToastModal__VariantProps = new Array<VariantPropType>();

export type PlasmicToastModal__ArgsType = {};
type ArgPropType = keyof PlasmicToastModal__ArgsType;
export const PlasmicToastModal__ArgProps = new Array<ArgPropType>();

export type PlasmicToastModal__OverridesType = {
  root?: Flex__<"div">;
  toasts?: Flex__<"div">;
  property1FalseProperty2LgProperty3Success?: Flex__<"div">;
  badge2?: Flex__<"div">;
  badgeBase2?: Flex__<"div">;
  text2?: Flex__<"div">;
  message2?: Flex__<"div">;
  property1FalseProperty2LgProperty3Warning?: Flex__<"div">;
  badge3?: Flex__<"div">;
  badgeBase3?: Flex__<"div">;
  text3?: Flex__<"div">;
  message3?: Flex__<"div">;
  property1FalseProperty2LgProperty3Error?: Flex__<"div">;
  badge6?: Flex__<"div">;
  badgeBase6?: Flex__<"div">;
  text6?: Flex__<"div">;
  message6?: Flex__<"div">;
  property1FalseProperty2LgProperty3Information?: Flex__<"div">;
  badge7?: Flex__<"div">;
  badgeBase7?: Flex__<"div">;
  text7?: Flex__<"div">;
  message7?: Flex__<"div">;
  property1TrueProperty2LgProperty3Error?: Flex__<"div">;
  badge5?: Flex__<"div">;
  badgeBase5?: Flex__<"div">;
  text5?: Flex__<"div">;
  content3?: Flex__<"div">;
  message5?: Flex__<"div">;
  property1TrueProperty2LgProperty3Warning?: Flex__<"div">;
  badge4?: Flex__<"div">;
  badgeBase4?: Flex__<"div">;
  text4?: Flex__<"div">;
  content2?: Flex__<"div">;
  message4?: Flex__<"div">;
  property1TrueProperty2LgProperty3Information?: Flex__<"div">;
  badge?: Flex__<"div">;
  badgeBase?: Flex__<"div">;
  text?: Flex__<"div">;
  content?: Flex__<"div">;
  message?: Flex__<"div">;
  property1TrueProperty2LgProperty3Success?: Flex__<"div">;
  badge8?: Flex__<"div">;
  badgeBase8?: Flex__<"div">;
  text8?: Flex__<"div">;
  content4?: Flex__<"div">;
  message8?: Flex__<"div">;
  modal?: Flex__<"div">;
  content5?: Flex__<"div">;
  systemIcons?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text9?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  inputDropdown?: Flex__<"div">;
  inputDropdownBase?: Flex__<"div">;
  inputWithLabel?: Flex__<"div">;
  label?: Flex__<"div">;
  input?: Flex__<"div">;
  content6?: Flex__<"div">;
  text10?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  modalActions?: Flex__<"div">;
  button?: Flex__<"div">;
  buttonBase?: Flex__<"div">;
  text11?: Flex__<"div">;
  button2?: Flex__<"div">;
  buttonBase2?: Flex__<"div">;
  text12?: Flex__<"div">;
};

export interface DefaultToastModalProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToastModal__RenderFunc(props: {
  variants: PlasmicToastModal__VariantsArgs;
  args: PlasmicToastModal__ArgsType;
  overrides: PlasmicToastModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"toasts"}
            data-plasmic-override={overrides.toasts}
            className={classNames(projectcss.all, sty.toasts)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"property1FalseProperty2LgProperty3Success"}
              data-plasmic-override={
                overrides.property1FalseProperty2LgProperty3Success
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1FalseProperty2LgProperty3Success
              )}
            >
              <div
                data-plasmic-name={"badge2"}
                data-plasmic-override={overrides.badge2}
                className={classNames(projectcss.all, sty.badge2)}
              >
                <div
                  data-plasmic-name={"badgeBase2"}
                  data-plasmic-override={overrides.badgeBase2}
                  className={classNames(projectcss.all, sty.badgeBase2)}
                >
                  <div
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text2
                    )}
                  >
                    {"Success"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"message2"}
                data-plasmic-override={overrides.message2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.message2
                )}
              >
                {"You\u2019ve updated your profile and details"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1FalseProperty2LgProperty3Warning"}
              data-plasmic-override={
                overrides.property1FalseProperty2LgProperty3Warning
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1FalseProperty2LgProperty3Warning
              )}
            >
              <div
                data-plasmic-name={"badge3"}
                data-plasmic-override={overrides.badge3}
                className={classNames(projectcss.all, sty.badge3)}
              >
                <div
                  data-plasmic-name={"badgeBase3"}
                  data-plasmic-override={overrides.badgeBase3}
                  className={classNames(projectcss.all, sty.badgeBase3)}
                >
                  <div
                    data-plasmic-name={"text3"}
                    data-plasmic-override={overrides.text3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text3
                    )}
                  >
                    {"Warning"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"message3"}
                data-plasmic-override={overrides.message3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.message3
                )}
              >
                {"Just to let you know this might be a problem"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1FalseProperty2LgProperty3Error"}
              data-plasmic-override={
                overrides.property1FalseProperty2LgProperty3Error
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1FalseProperty2LgProperty3Error
              )}
            >
              <div
                data-plasmic-name={"badge6"}
                data-plasmic-override={overrides.badge6}
                className={classNames(projectcss.all, sty.badge6)}
              >
                <div
                  data-plasmic-name={"badgeBase6"}
                  data-plasmic-override={overrides.badgeBase6}
                  className={classNames(projectcss.all, sty.badgeBase6)}
                >
                  <div
                    data-plasmic-name={"text6"}
                    data-plasmic-override={overrides.text6}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text6
                    )}
                  >
                    {"Error"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"message6"}
                data-plasmic-override={overrides.message6}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.message6
                )}
              >
                {"There was a problem with that action"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={
                "property1FalseProperty2LgProperty3Information"
              }
              data-plasmic-override={
                overrides.property1FalseProperty2LgProperty3Information
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1FalseProperty2LgProperty3Information
              )}
            >
              <div
                data-plasmic-name={"badge7"}
                data-plasmic-override={overrides.badge7}
                className={classNames(projectcss.all, sty.badge7)}
              >
                <div
                  data-plasmic-name={"badgeBase7"}
                  data-plasmic-override={overrides.badgeBase7}
                  className={classNames(projectcss.all, sty.badgeBase7)}
                >
                  <div
                    data-plasmic-name={"text7"}
                    data-plasmic-override={overrides.text7}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text7
                    )}
                  >
                    {"New feature"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"message7"}
                data-plasmic-override={overrides.message7}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.message7
                )}
              >
                {"We\u2019ve just released a new feature"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1TrueProperty2LgProperty3Error"}
              data-plasmic-override={
                overrides.property1TrueProperty2LgProperty3Error
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1TrueProperty2LgProperty3Error
              )}
            >
              <div
                data-plasmic-name={"badge5"}
                data-plasmic-override={overrides.badge5}
                className={classNames(projectcss.all, sty.badge5)}
              >
                <div
                  data-plasmic-name={"badgeBase5"}
                  data-plasmic-override={overrides.badgeBase5}
                  className={classNames(projectcss.all, sty.badgeBase5)}
                >
                  <div
                    data-plasmic-name={"text5"}
                    data-plasmic-override={overrides.text5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text5
                    )}
                  >
                    {"Error"}
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"content3"}
                data-plasmic-override={overrides.content3}
                hasGap={true}
                className={classNames(projectcss.all, sty.content3)}
              >
                <div
                  data-plasmic-name={"message5"}
                  data-plasmic-override={overrides.message5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.message5
                  )}
                >
                  {"There was a problem with that action"}
                </div>
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg__r10Az)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1TrueProperty2LgProperty3Warning"}
              data-plasmic-override={
                overrides.property1TrueProperty2LgProperty3Warning
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1TrueProperty2LgProperty3Warning
              )}
            >
              <div
                data-plasmic-name={"badge4"}
                data-plasmic-override={overrides.badge4}
                className={classNames(projectcss.all, sty.badge4)}
              >
                <div
                  data-plasmic-name={"badgeBase4"}
                  data-plasmic-override={overrides.badgeBase4}
                  className={classNames(projectcss.all, sty.badgeBase4)}
                >
                  <div
                    data-plasmic-name={"text4"}
                    data-plasmic-override={overrides.text4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text4
                    )}
                  >
                    {"Warning"}
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                hasGap={true}
                className={classNames(projectcss.all, sty.content2)}
              >
                <div
                  data-plasmic-name={"message4"}
                  data-plasmic-override={overrides.message4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.message4
                  )}
                >
                  {"Just to let you know this might be a problem"}
                </div>
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg__wBKuW)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1TrueProperty2LgProperty3Information"}
              data-plasmic-override={
                overrides.property1TrueProperty2LgProperty3Information
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1TrueProperty2LgProperty3Information
              )}
            >
              <div
                data-plasmic-name={"badge"}
                data-plasmic-override={overrides.badge}
                className={classNames(projectcss.all, sty.badge)}
              >
                <div
                  data-plasmic-name={"badgeBase"}
                  data-plasmic-override={overrides.badgeBase}
                  className={classNames(projectcss.all, sty.badgeBase)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"New feature"}
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <div
                  data-plasmic-name={"message"}
                  data-plasmic-override={overrides.message}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.message
                  )}
                >
                  {"We\u2019ve just released a new feature"}
                </div>
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg__qwarM)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"property1TrueProperty2LgProperty3Success"}
              data-plasmic-override={
                overrides.property1TrueProperty2LgProperty3Success
              }
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.property1TrueProperty2LgProperty3Success
              )}
            >
              <div
                data-plasmic-name={"badge8"}
                data-plasmic-override={overrides.badge8}
                className={classNames(projectcss.all, sty.badge8)}
              >
                <div
                  data-plasmic-name={"badgeBase8"}
                  data-plasmic-override={overrides.badgeBase8}
                  className={classNames(projectcss.all, sty.badgeBase8)}
                >
                  <div
                    data-plasmic-name={"text8"}
                    data-plasmic-override={overrides.text8}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text8
                    )}
                  >
                    {"Success"}
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"content4"}
                data-plasmic-override={overrides.content4}
                hasGap={true}
                className={classNames(projectcss.all, sty.content4)}
              >
                <div
                  data-plasmic-name={"message8"}
                  data-plasmic-override={overrides.message8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.message8
                  )}
                >
                  {"You\u2019ve updated your profile and details"}
                </div>
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg__x59MU)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            hasGap={true}
            className={classNames(projectcss.all, sty.modal)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content5"}
              data-plasmic-override={overrides.content5}
              hasGap={true}
              className={classNames(projectcss.all, sty.content5)}
            >
              <div
                data-plasmic-name={"systemIcons"}
                data-plasmic-override={overrides.systemIcons}
                className={classNames(projectcss.all, sty.systemIcons)}
              >
                <CheckCircleIcon
                  className={classNames(projectcss.all, sty.svg__llOif)}
                  role={"img"}
                />
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"textAndSupportingText"}
                data-plasmic-override={overrides.textAndSupportingText}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.textAndSupportingText
                )}
              >
                <div
                  data-plasmic-name={"text9"}
                  data-plasmic-override={overrides.text9}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text9
                  )}
                >
                  {"Blog post published"}
                </div>
                <div
                  data-plasmic-name={"supportingText"}
                  data-plasmic-override={overrides.supportingText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText
                  )}
                >
                  {
                    "This blog post has been published. Team members will be able to edit this post and republish changes."
                  }
                </div>
              </Stack__>
              <div
                data-plasmic-name={"inputDropdown"}
                data-plasmic-override={overrides.inputDropdown}
                className={classNames(projectcss.all, sty.inputDropdown)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"inputDropdownBase"}
                  data-plasmic-override={overrides.inputDropdownBase}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.inputDropdownBase)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputWithLabel"}
                    data-plasmic-override={overrides.inputWithLabel}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputWithLabel)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                    >
                      {"Team member"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.input)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content6"}
                        data-plasmic-override={overrides.content6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content6)}
                      >
                        <UserIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4O4Yl
                          )}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"text10"}
                          data-plasmic-override={overrides.text10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text10
                          )}
                        >
                          {"Olivia Rhye"}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"supportingText2"}
                            data-plasmic-override={overrides.supportingText2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText2
                            )}
                          >
                            {"@olivia"}
                          </div>
                        ) : null}
                      </Stack__>
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__cLtcH)}
                        role={"img"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"modalActions"}
              data-plasmic-override={overrides.modalActions}
              hasGap={true}
              className={classNames(projectcss.all, sty.modalActions)}
            >
              <div
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(projectcss.all, sty.button)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonBase"}
                  data-plasmic-override={overrides.buttonBase}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonBase)}
                >
                  <div
                    data-plasmic-name={"text11"}
                    data-plasmic-override={overrides.text11}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text11
                    )}
                  >
                    {"Cancel"}
                  </div>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames(projectcss.all, sty.button2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonBase2"}
                  data-plasmic-override={overrides.buttonBase2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonBase2)}
                >
                  <div
                    data-plasmic-name={"text12"}
                    data-plasmic-override={overrides.text12}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text12
                    )}
                  >
                    {"Confirm"}
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "toasts",
    "property1FalseProperty2LgProperty3Success",
    "badge2",
    "badgeBase2",
    "text2",
    "message2",
    "property1FalseProperty2LgProperty3Warning",
    "badge3",
    "badgeBase3",
    "text3",
    "message3",
    "property1FalseProperty2LgProperty3Error",
    "badge6",
    "badgeBase6",
    "text6",
    "message6",
    "property1FalseProperty2LgProperty3Information",
    "badge7",
    "badgeBase7",
    "text7",
    "message7",
    "property1TrueProperty2LgProperty3Error",
    "badge5",
    "badgeBase5",
    "text5",
    "content3",
    "message5",
    "property1TrueProperty2LgProperty3Warning",
    "badge4",
    "badgeBase4",
    "text4",
    "content2",
    "message4",
    "property1TrueProperty2LgProperty3Information",
    "badge",
    "badgeBase",
    "text",
    "content",
    "message",
    "property1TrueProperty2LgProperty3Success",
    "badge8",
    "badgeBase8",
    "text8",
    "content4",
    "message8",
    "modal",
    "content5",
    "systemIcons",
    "textAndSupportingText",
    "text9",
    "supportingText",
    "inputDropdown",
    "inputDropdownBase",
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2",
    "modalActions",
    "button",
    "buttonBase",
    "text11",
    "button2",
    "buttonBase2",
    "text12"
  ],
  toasts: [
    "toasts",
    "property1FalseProperty2LgProperty3Success",
    "badge2",
    "badgeBase2",
    "text2",
    "message2",
    "property1FalseProperty2LgProperty3Warning",
    "badge3",
    "badgeBase3",
    "text3",
    "message3",
    "property1FalseProperty2LgProperty3Error",
    "badge6",
    "badgeBase6",
    "text6",
    "message6",
    "property1FalseProperty2LgProperty3Information",
    "badge7",
    "badgeBase7",
    "text7",
    "message7",
    "property1TrueProperty2LgProperty3Error",
    "badge5",
    "badgeBase5",
    "text5",
    "content3",
    "message5",
    "property1TrueProperty2LgProperty3Warning",
    "badge4",
    "badgeBase4",
    "text4",
    "content2",
    "message4",
    "property1TrueProperty2LgProperty3Information",
    "badge",
    "badgeBase",
    "text",
    "content",
    "message",
    "property1TrueProperty2LgProperty3Success",
    "badge8",
    "badgeBase8",
    "text8",
    "content4",
    "message8"
  ],
  property1FalseProperty2LgProperty3Success: [
    "property1FalseProperty2LgProperty3Success",
    "badge2",
    "badgeBase2",
    "text2",
    "message2"
  ],
  badge2: ["badge2", "badgeBase2", "text2"],
  badgeBase2: ["badgeBase2", "text2"],
  text2: ["text2"],
  message2: ["message2"],
  property1FalseProperty2LgProperty3Warning: [
    "property1FalseProperty2LgProperty3Warning",
    "badge3",
    "badgeBase3",
    "text3",
    "message3"
  ],
  badge3: ["badge3", "badgeBase3", "text3"],
  badgeBase3: ["badgeBase3", "text3"],
  text3: ["text3"],
  message3: ["message3"],
  property1FalseProperty2LgProperty3Error: [
    "property1FalseProperty2LgProperty3Error",
    "badge6",
    "badgeBase6",
    "text6",
    "message6"
  ],
  badge6: ["badge6", "badgeBase6", "text6"],
  badgeBase6: ["badgeBase6", "text6"],
  text6: ["text6"],
  message6: ["message6"],
  property1FalseProperty2LgProperty3Information: [
    "property1FalseProperty2LgProperty3Information",
    "badge7",
    "badgeBase7",
    "text7",
    "message7"
  ],
  badge7: ["badge7", "badgeBase7", "text7"],
  badgeBase7: ["badgeBase7", "text7"],
  text7: ["text7"],
  message7: ["message7"],
  property1TrueProperty2LgProperty3Error: [
    "property1TrueProperty2LgProperty3Error",
    "badge5",
    "badgeBase5",
    "text5",
    "content3",
    "message5"
  ],
  badge5: ["badge5", "badgeBase5", "text5"],
  badgeBase5: ["badgeBase5", "text5"],
  text5: ["text5"],
  content3: ["content3", "message5"],
  message5: ["message5"],
  property1TrueProperty2LgProperty3Warning: [
    "property1TrueProperty2LgProperty3Warning",
    "badge4",
    "badgeBase4",
    "text4",
    "content2",
    "message4"
  ],
  badge4: ["badge4", "badgeBase4", "text4"],
  badgeBase4: ["badgeBase4", "text4"],
  text4: ["text4"],
  content2: ["content2", "message4"],
  message4: ["message4"],
  property1TrueProperty2LgProperty3Information: [
    "property1TrueProperty2LgProperty3Information",
    "badge",
    "badgeBase",
    "text",
    "content",
    "message"
  ],
  badge: ["badge", "badgeBase", "text"],
  badgeBase: ["badgeBase", "text"],
  text: ["text"],
  content: ["content", "message"],
  message: ["message"],
  property1TrueProperty2LgProperty3Success: [
    "property1TrueProperty2LgProperty3Success",
    "badge8",
    "badgeBase8",
    "text8",
    "content4",
    "message8"
  ],
  badge8: ["badge8", "badgeBase8", "text8"],
  badgeBase8: ["badgeBase8", "text8"],
  text8: ["text8"],
  content4: ["content4", "message8"],
  message8: ["message8"],
  modal: [
    "modal",
    "content5",
    "systemIcons",
    "textAndSupportingText",
    "text9",
    "supportingText",
    "inputDropdown",
    "inputDropdownBase",
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2",
    "modalActions",
    "button",
    "buttonBase",
    "text11",
    "button2",
    "buttonBase2",
    "text12"
  ],
  content5: [
    "content5",
    "systemIcons",
    "textAndSupportingText",
    "text9",
    "supportingText",
    "inputDropdown",
    "inputDropdownBase",
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2"
  ],
  systemIcons: ["systemIcons"],
  textAndSupportingText: ["textAndSupportingText", "text9", "supportingText"],
  text9: ["text9"],
  supportingText: ["supportingText"],
  inputDropdown: [
    "inputDropdown",
    "inputDropdownBase",
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2"
  ],
  inputDropdownBase: [
    "inputDropdownBase",
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2"
  ],
  inputWithLabel: [
    "inputWithLabel",
    "label",
    "input",
    "content6",
    "text10",
    "supportingText2"
  ],
  label: ["label"],
  input: ["input", "content6", "text10", "supportingText2"],
  content6: ["content6", "text10", "supportingText2"],
  text10: ["text10"],
  supportingText2: ["supportingText2"],
  modalActions: [
    "modalActions",
    "button",
    "buttonBase",
    "text11",
    "button2",
    "buttonBase2",
    "text12"
  ],
  button: ["button", "buttonBase", "text11"],
  buttonBase: ["buttonBase", "text11"],
  text11: ["text11"],
  button2: ["button2", "buttonBase2", "text12"],
  buttonBase2: ["buttonBase2", "text12"],
  text12: ["text12"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  toasts: "div";
  property1FalseProperty2LgProperty3Success: "div";
  badge2: "div";
  badgeBase2: "div";
  text2: "div";
  message2: "div";
  property1FalseProperty2LgProperty3Warning: "div";
  badge3: "div";
  badgeBase3: "div";
  text3: "div";
  message3: "div";
  property1FalseProperty2LgProperty3Error: "div";
  badge6: "div";
  badgeBase6: "div";
  text6: "div";
  message6: "div";
  property1FalseProperty2LgProperty3Information: "div";
  badge7: "div";
  badgeBase7: "div";
  text7: "div";
  message7: "div";
  property1TrueProperty2LgProperty3Error: "div";
  badge5: "div";
  badgeBase5: "div";
  text5: "div";
  content3: "div";
  message5: "div";
  property1TrueProperty2LgProperty3Warning: "div";
  badge4: "div";
  badgeBase4: "div";
  text4: "div";
  content2: "div";
  message4: "div";
  property1TrueProperty2LgProperty3Information: "div";
  badge: "div";
  badgeBase: "div";
  text: "div";
  content: "div";
  message: "div";
  property1TrueProperty2LgProperty3Success: "div";
  badge8: "div";
  badgeBase8: "div";
  text8: "div";
  content4: "div";
  message8: "div";
  modal: "div";
  content5: "div";
  systemIcons: "div";
  textAndSupportingText: "div";
  text9: "div";
  supportingText: "div";
  inputDropdown: "div";
  inputDropdownBase: "div";
  inputWithLabel: "div";
  label: "div";
  input: "div";
  content6: "div";
  text10: "div";
  supportingText2: "div";
  modalActions: "div";
  button: "div";
  buttonBase: "div";
  text11: "div";
  button2: "div";
  buttonBase2: "div";
  text12: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToastModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToastModal__VariantsArgs;
    args?: PlasmicToastModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToastModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicToastModal__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicToastModal__ArgProps,
          internalVariantPropNames: PlasmicToastModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToastModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToastModal";
  } else {
    func.displayName = `PlasmicToastModal.${nodeName}`;
  }
  return func;
}

export const PlasmicToastModal = Object.assign(
  // Top-level PlasmicToastModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    toasts: makeNodeComponent("toasts"),
    property1FalseProperty2LgProperty3Success: makeNodeComponent(
      "property1FalseProperty2LgProperty3Success"
    ),
    badge2: makeNodeComponent("badge2"),
    badgeBase2: makeNodeComponent("badgeBase2"),
    text2: makeNodeComponent("text2"),
    message2: makeNodeComponent("message2"),
    property1FalseProperty2LgProperty3Warning: makeNodeComponent(
      "property1FalseProperty2LgProperty3Warning"
    ),
    badge3: makeNodeComponent("badge3"),
    badgeBase3: makeNodeComponent("badgeBase3"),
    text3: makeNodeComponent("text3"),
    message3: makeNodeComponent("message3"),
    property1FalseProperty2LgProperty3Error: makeNodeComponent(
      "property1FalseProperty2LgProperty3Error"
    ),
    badge6: makeNodeComponent("badge6"),
    badgeBase6: makeNodeComponent("badgeBase6"),
    text6: makeNodeComponent("text6"),
    message6: makeNodeComponent("message6"),
    property1FalseProperty2LgProperty3Information: makeNodeComponent(
      "property1FalseProperty2LgProperty3Information"
    ),
    badge7: makeNodeComponent("badge7"),
    badgeBase7: makeNodeComponent("badgeBase7"),
    text7: makeNodeComponent("text7"),
    message7: makeNodeComponent("message7"),
    property1TrueProperty2LgProperty3Error: makeNodeComponent(
      "property1TrueProperty2LgProperty3Error"
    ),
    badge5: makeNodeComponent("badge5"),
    badgeBase5: makeNodeComponent("badgeBase5"),
    text5: makeNodeComponent("text5"),
    content3: makeNodeComponent("content3"),
    message5: makeNodeComponent("message5"),
    property1TrueProperty2LgProperty3Warning: makeNodeComponent(
      "property1TrueProperty2LgProperty3Warning"
    ),
    badge4: makeNodeComponent("badge4"),
    badgeBase4: makeNodeComponent("badgeBase4"),
    text4: makeNodeComponent("text4"),
    content2: makeNodeComponent("content2"),
    message4: makeNodeComponent("message4"),
    property1TrueProperty2LgProperty3Information: makeNodeComponent(
      "property1TrueProperty2LgProperty3Information"
    ),
    badge: makeNodeComponent("badge"),
    badgeBase: makeNodeComponent("badgeBase"),
    text: makeNodeComponent("text"),
    content: makeNodeComponent("content"),
    message: makeNodeComponent("message"),
    property1TrueProperty2LgProperty3Success: makeNodeComponent(
      "property1TrueProperty2LgProperty3Success"
    ),
    badge8: makeNodeComponent("badge8"),
    badgeBase8: makeNodeComponent("badgeBase8"),
    text8: makeNodeComponent("text8"),
    content4: makeNodeComponent("content4"),
    message8: makeNodeComponent("message8"),
    modal: makeNodeComponent("modal"),
    content5: makeNodeComponent("content5"),
    systemIcons: makeNodeComponent("systemIcons"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text9: makeNodeComponent("text9"),
    supportingText: makeNodeComponent("supportingText"),
    inputDropdown: makeNodeComponent("inputDropdown"),
    inputDropdownBase: makeNodeComponent("inputDropdownBase"),
    inputWithLabel: makeNodeComponent("inputWithLabel"),
    label: makeNodeComponent("label"),
    input: makeNodeComponent("input"),
    content6: makeNodeComponent("content6"),
    text10: makeNodeComponent("text10"),
    supportingText2: makeNodeComponent("supportingText2"),
    modalActions: makeNodeComponent("modalActions"),
    button: makeNodeComponent("button"),
    buttonBase: makeNodeComponent("buttonBase"),
    text11: makeNodeComponent("text11"),
    button2: makeNodeComponent("button2"),
    buttonBase2: makeNodeComponent("buttonBase2"),
    text12: makeNodeComponent("text12"),

    // Metadata about props expected for PlasmicToastModal
    internalVariantProps: PlasmicToastModal__VariantProps,
    internalArgProps: PlasmicToastModal__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicToastModal;
/* prettier-ignore-end */
