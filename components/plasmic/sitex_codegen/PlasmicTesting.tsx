// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: huic3TDZds9G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SitexTextInput } from "../../forms/SitexTextInput/SitexTextInput"; // plasmic-import: zClft0dnz2YJ/codeComponent
import { SitexForm } from "../../forms/SitexForm/SitexForm"; // plasmic-import: mxACV1BypKcM/codeComponent
import { SitexButton } from "../../forms/SitexButton/SitexButton"; // plasmic-import: T7w0r0nF1NLY/codeComponent
import SwitchCustom from "../../SwitchCustom"; // plasmic-import: P-Rlj4kzeace/component
import { PasswordCheckIndicator } from "../../forms/PasswordCheckIndicator/PasswordCheckIndicator"; // plasmic-import: jX3loYzZGctn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicTesting.module.css"; // plasmic-import: huic3TDZds9G/css

createPlasmicElementProxy;

export type PlasmicTesting__VariantMembers = {};
export type PlasmicTesting__VariantsArgs = {};
type VariantPropType = keyof PlasmicTesting__VariantsArgs;
export const PlasmicTesting__VariantProps = new Array<VariantPropType>();

export type PlasmicTesting__ArgsType = {};
type ArgPropType = keyof PlasmicTesting__ArgsType;
export const PlasmicTesting__ArgProps = new Array<ArgPropType>();

export type PlasmicTesting__OverridesType = {
  root?: Flex__<"div">;
  codeTextInput?: Flex__<typeof SitexTextInput>;
  codeTextInput2?: Flex__<typeof SitexTextInput>;
  buttonSitex?: Flex__<typeof SitexButton>;
  freeBox?: Flex__<"div">;
  switchCustom?: Flex__<typeof SwitchCustom>;
};

export interface DefaultTestingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTesting__RenderFunc(props: {
  variants: PlasmicTesting__VariantsArgs;
  args: PlasmicTesting__ArgsType;
  overrides: PlasmicTesting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "switchCustom.isOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codeTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codeTextInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codeTextInput.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codeTextInput2.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <SitexTextInput
            data-plasmic-name={"codeTextInput"}
            data-plasmic-override={overrides.codeTextInput}
            className={classNames("__wab_instance", sty.codeTextInput)}
            initialValue={generateStateValueProp($state, [
              "codeTextInput",
              "value"
            ])}
            onTextChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "codeTextInput",
                "value"
              ]).apply(null, eventArgs);
            }}
            onValidationChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "codeTextInput",
                "isInputValid"
              ]).apply(null, eventArgs);
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oP7IP
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.product;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <SitexForm
            className={classNames("__wab_instance", sty.formSitex__y1CxU)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dbqF
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </SitexForm>
          <SitexForm
            className={classNames("__wab_instance", sty.formSitex__iLhcb)}
          >
            <SitexTextInput
              data-plasmic-name={"codeTextInput2"}
              data-plasmic-override={overrides.codeTextInput2}
              className={classNames("__wab_instance", sty.codeTextInput2)}
              initialValue={generateStateValueProp($state, [
                "codeTextInput2",
                "value"
              ])}
              onTextChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "codeTextInput2",
                  "value"
                ]).apply(null, eventArgs);
              }}
              onValidationChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "codeTextInput2",
                  "isInputValid"
                ]).apply(null, eventArgs);
              }}
            />

            <SitexButton
              data-plasmic-name={"buttonSitex"}
              data-plasmic-override={overrides.buttonSitex}
              className={classNames("__wab_instance", sty.buttonSitex)}
              disabled={(() => {
                try {
                  return $ctx.isValid;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              hierarchy={"primary"}
              icon={"none"}
              size={"large"}
            />
          </SitexForm>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <SwitchCustom
              data-plasmic-name={"switchCustom"}
              data-plasmic-override={overrides.switchCustom}
              className={classNames("__wab_instance", sty.switchCustom)}
              isOn={generateStateValueProp($state, ["switchCustom", "isOn"])}
              onIsOnChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "switchCustom",
                  "isOn"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            {(() => {
              try {
                return $state.switchCustom.isOn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v8Lq
                )}
              >
                {"Enter some text"}
              </div>
            ) : null}
          </div>
          <PasswordCheckIndicator
            className={classNames(
              "__wab_instance",
              sty.passwordCheckIndicator__mim7
            )}
            numberOfChecksToMake={6}
            numberOfChecksValidated={2}
          />

          <PasswordCheckIndicator
            className={classNames(
              "__wab_instance",
              sty.passwordCheckIndicator__vcrM8
            )}
            numberOfChecksToMake={6}
            numberOfChecksValidated={2}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "codeTextInput",
    "codeTextInput2",
    "buttonSitex",
    "freeBox",
    "switchCustom"
  ],
  codeTextInput: ["codeTextInput"],
  codeTextInput2: ["codeTextInput2"],
  buttonSitex: ["buttonSitex"],
  freeBox: ["freeBox", "switchCustom"],
  switchCustom: ["switchCustom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  codeTextInput: typeof SitexTextInput;
  codeTextInput2: typeof SitexTextInput;
  buttonSitex: typeof SitexButton;
  freeBox: "div";
  switchCustom: typeof SwitchCustom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTesting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTesting__VariantsArgs;
    args?: PlasmicTesting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTesting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTesting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTesting__ArgProps,
          internalVariantPropNames: PlasmicTesting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTesting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTesting";
  } else {
    func.displayName = `PlasmicTesting.${nodeName}`;
  }
  return func;
}

export const PlasmicTesting = Object.assign(
  // Top-level PlasmicTesting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    codeTextInput: makeNodeComponent("codeTextInput"),
    codeTextInput2: makeNodeComponent("codeTextInput2"),
    buttonSitex: makeNodeComponent("buttonSitex"),
    freeBox: makeNodeComponent("freeBox"),
    switchCustom: makeNodeComponent("switchCustom"),

    // Metadata about props expected for PlasmicTesting
    internalVariantProps: PlasmicTesting__VariantProps,
    internalArgProps: PlasmicTesting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTesting;
/* prettier-ignore-end */
