// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: orPHpegkXfnsyZCa6kLatK
// Component: huZbwUJcgevK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: B1CkwnOb2Btf/component
import TextInput from "../../TextInput"; // plasmic-import: p2wlGiF5nbRC/component
import { PasswordCheckIndicator } from "../../forms/PasswordCheckIndicator/PasswordCheckIndicator"; // plasmic-import: jX3loYzZGctn/codeComponent
import { SitexButton } from "../../forms/SitexButton/SitexButton"; // plasmic-import: T7w0r0nF1NLY/codeComponent
import { SitexForm } from "../../forms/SitexForm/SitexForm"; // plasmic-import: mxACV1BypKcM/codeComponent
import { SitexTextInput } from "../../forms/SitexTextInput/SitexTextInput"; // plasmic-import: zClft0dnz2YJ/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsmdMOkRvSd3Wv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: mdMOkRVSd3Wv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: orPHpegkXfnsyZCa6kLatK/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: huZbwUJcgevK/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 80gfzuFHPKbB/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: r6EQmBRwKBEe/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  login?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  signInUp?: Flex__<"div">;
  cardSignUp?: Flex__<"div">;
  contentCardSignUp?: Flex__<"div">;
  cardSignUpTitle?: Flex__<"div">;
  h2?: Flex__<"h2">;
  formSignUp?: Flex__<"div">;
  firstRowSignUp?: Flex__<"div">;
  inputBlockSignInEmail2?: Flex__<"div">;
  labelSignInEmail2?: Flex__<"div">;
  nameSignUp?: Flex__<typeof TextInput>;
  inputBlockSignInEmail3?: Flex__<"div">;
  labelSignInEmail3?: Flex__<"div">;
  firstNameSignUp?: Flex__<typeof TextInput>;
  inputBlockSignInEmail4?: Flex__<"div">;
  labelSignInEmail4?: Flex__<"div">;
  emailSignUp?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  inputBlockSignInPassword2?: Flex__<"div">;
  labelSignInPassword2?: Flex__<"div">;
  passwordSignUp?: Flex__<typeof TextInput>;
  passwordCheckIndicator?: Flex__<typeof PasswordCheckIndicator>;
  inputBlockSignInPassword3?: Flex__<"div">;
  labelSignInPassword3?: Flex__<"div">;
  passwordConfirmSignUp?: Flex__<typeof TextInput>;
  submitBtnSignUp?: Flex__<typeof SitexButton>;
  cardSignIn?: Flex__<"div">;
  contentCardSignIn?: Flex__<"div">;
  heading?: Flex__<"div">;
  formSignIn?: Flex__<typeof SitexForm>;
  formContentSignIn?: Flex__<"div">;
  emailFieldSignIn?: Flex__<"div">;
  labelSignInEmail?: Flex__<"div">;
  emailInputSignIn?: Flex__<typeof SitexTextInput>;
  passwordFieldSignIn?: Flex__<"div">;
  labelSignInPassword?: Flex__<"div">;
  passwordInputSignIn?: Flex__<typeof SitexTextInput>;
  passwordForgottenSignIn?: Flex__<"div">;
  btnSubmitSignIn?: Flex__<typeof SitexButton>;
  home?: Flex__<"div">;
  imageSitexHome?: Flex__<typeof PlasmicImg__>;
  buttonHome?: Flex__<typeof SitexButton>;
  resetPassword?: Flex__<"div">;
  resetPasswordCard?: Flex__<"div">;
  contentResetPasswordCard?: Flex__<"div">;
  headingResetPasswordCard?: Flex__<"div">;
  titleResetPAsswordCard?: Flex__<"div">;
  subtitleResetPAsswordCard?: Flex__<"div">;
  formResetPassword?: Flex__<typeof FormWrapper>;
  emailBlockResetPasswordCard?: Flex__<"div">;
  emailResetPassword?: Flex__<typeof TextInput>;
  submitButtonResetPassword?: Flex__<typeof SitexButton>;
  buttonSitex?: Flex__<typeof SitexButton>;
};

export interface DefaultLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "view",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "signIn"
      },
      {
        path: "nameSignUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "firstNameSignUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailSignUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordSignUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordCheck",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "passwordConfirmSignUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailResetPassword.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "formResetPassword.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formResetPassword",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formResetPassword.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formResetPassword",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "emailInputSignIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "testing@gmail.com"
      },
      {
        path: "passwordInputSignIn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "emailInputSignIn.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "passwordInputSignIn.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmdMOkRvSd3Wv()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"login"}
        data-plasmic-override={overrides.login}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.login
        )}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
          />

          {(() => {
            try {
              return (
                $state.view === "signIn" ||
                $state.view === "signUp" ||
                $state.view === "home"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"signInUp"}
              data-plasmic-override={overrides.signInUp}
              className={classNames(projectcss.all, sty.signInUp)}
            >
              {(() => {
                try {
                  return $state.view === "signUp";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"cardSignUp"}
                  data-plasmic-override={overrides.cardSignUp}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardSignUp)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"contentCardSignUp"}
                    data-plasmic-override={overrides.contentCardSignUp}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.contentCardSignUp
                    )}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardSignUpTitle"}
                      data-plasmic-override={overrides.cardSignUpTitle}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.cardSignUpTitle
                      )}
                    >
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {"Bienvenue!"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5U6A4
                        )}
                      >
                        {
                          "Pour votre premi\u00e8re connexion, renseignez votre e-mail et choisissez un mot de passe."
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"formSignUp"}
                      data-plasmic-override={overrides.formSignUp}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.formSignUp)}
                      onSubmit={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "SupabaseUserGlobalContext.login"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"firstRowSignUp"}
                        data-plasmic-override={overrides.firstRowSignUp}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.firstRowSignUp
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputBlockSignInEmail2"}
                          data-plasmic-override={
                            overrides.inputBlockSignInEmail2
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputBlockSignInEmail2
                          )}
                        >
                          <div
                            data-plasmic-name={"labelSignInEmail2"}
                            data-plasmic-override={overrides.labelSignInEmail2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labelSignInEmail2
                            )}
                          >
                            {"Nom*"}
                          </div>
                          <TextInput
                            data-plasmic-name={"nameSignUp"}
                            data-plasmic-override={overrides.nameSignUp}
                            className={classNames(
                              "__wab_instance",
                              sty.nameSignUp
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "nameSignUp",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Nom"}
                            value={
                              generateStateValueProp($state, [
                                "nameSignUp",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputBlockSignInEmail3"}
                          data-plasmic-override={
                            overrides.inputBlockSignInEmail3
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputBlockSignInEmail3
                          )}
                        >
                          <div
                            data-plasmic-name={"labelSignInEmail3"}
                            data-plasmic-override={overrides.labelSignInEmail3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labelSignInEmail3
                            )}
                          >
                            {"Pr\u00e9nom*"}
                          </div>
                          <TextInput
                            data-plasmic-name={"firstNameSignUp"}
                            data-plasmic-override={overrides.firstNameSignUp}
                            className={classNames(
                              "__wab_instance",
                              sty.firstNameSignUp
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "firstNameSignUp",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                            value={
                              generateStateValueProp($state, [
                                "firstNameSignUp",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputBlockSignInEmail4"}
                        data-plasmic-override={overrides.inputBlockSignInEmail4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputBlockSignInEmail4
                        )}
                      >
                        <div
                          data-plasmic-name={"labelSignInEmail4"}
                          data-plasmic-override={overrides.labelSignInEmail4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.labelSignInEmail4
                          )}
                        >
                          {"Email*"}
                        </div>
                        <TextInput
                          data-plasmic-name={"emailSignUp"}
                          data-plasmic-override={overrides.emailSignUp}
                          className={classNames(
                            "__wab_instance",
                            sty.emailSignUp
                          )}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "emailSignUp",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"email@email.com"}
                          startIcon={
                            <SearchSvgIcon
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />
                          }
                          value={
                            generateStateValueProp($state, [
                              "emailSignUp",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputBlockSignInPassword2"}
                        data-plasmic-override={
                          overrides.inputBlockSignInPassword2
                        }
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputBlockSignInPassword2
                        )}
                      >
                        <div
                          data-plasmic-name={"labelSignInPassword2"}
                          data-plasmic-override={overrides.labelSignInPassword2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.labelSignInPassword2
                          )}
                        >
                          {"Mot de passe*"}
                        </div>
                        <TextInput
                          data-plasmic-name={"passwordSignUp"}
                          data-plasmic-override={overrides.passwordSignUp}
                          className={classNames(
                            "__wab_instance",
                            sty.passwordSignUp
                          )}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "passwordSignUp",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }

                            (async event => {
                              const $steps = {};

                              $steps["updatePasswordCheck"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["passwordCheck"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        let passwordCheck = 0;

                                        if (
                                          $state.passwordSignUp.value.match(
                                            ".*\\d+.*"
                                          )
                                        ) {
                                          passwordCheck += 1;
                                        }

                                        if (
                                          $state.passwordSignUp.value.length >=
                                          8
                                        ) {
                                          passwordCheck += 1;
                                        }

                                        if (
                                          $state.passwordSignUp.value.match(
                                            ".*[a-zA-Z].*"
                                          )
                                        ) {
                                          passwordCheck += 1;
                                        }

                                        if (
                                          $state.passwordSignUp.value.match(
                                            /[^\w\s]/
                                          )
                                        ) {
                                          passwordCheck += 1;
                                        }

                                        return passwordCheck;
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePasswordCheck"] != null &&
                                typeof $steps["updatePasswordCheck"] ===
                                  "object" &&
                                typeof $steps["updatePasswordCheck"].then ===
                                  "function"
                              ) {
                                $steps["updatePasswordCheck"] = await $steps[
                                  "updatePasswordCheck"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={"********"}
                          type={"password"}
                          value={
                            generateStateValueProp($state, [
                              "passwordSignUp",
                              "value"
                            ]) ?? ""
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f1HOl
                          )}
                        >
                          {
                            "Utilisez 8 caract\u00e8res ou plus en m\u00e9langeant lettres, chiffres et symboles."
                          }
                        </div>
                        <PasswordCheckIndicator
                          data-plasmic-name={"passwordCheckIndicator"}
                          data-plasmic-override={
                            overrides.passwordCheckIndicator
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.passwordCheckIndicator
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputBlockSignInPassword3"}
                        data-plasmic-override={
                          overrides.inputBlockSignInPassword3
                        }
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputBlockSignInPassword3
                        )}
                      >
                        <div
                          data-plasmic-name={"labelSignInPassword3"}
                          data-plasmic-override={overrides.labelSignInPassword3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.labelSignInPassword3
                          )}
                        >
                          {"R\u00e9p\u00e9tez le mot de passe*"}
                        </div>
                        <TextInput
                          data-plasmic-name={"passwordConfirmSignUp"}
                          data-plasmic-override={
                            overrides.passwordConfirmSignUp
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.passwordConfirmSignUp
                          )}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "passwordConfirmSignUp",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          }}
                          placeholder={"********"}
                          type={"password"}
                          value={
                            generateStateValueProp($state, [
                              "passwordConfirmSignUp",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </Stack__>
                      <SitexButton
                        data-plasmic-name={"submitBtnSignUp"}
                        data-plasmic-override={overrides.submitBtnSignUp}
                        className={classNames(
                          "__wab_instance",
                          sty.submitBtnSignUp
                        )}
                        hierarchy={"primary"}
                        icon={"none"}
                        label={"Connexion"}
                        onClick={async VarInput => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return $state.emailSignUp.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return $state.passwordSignUp.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    "/"
                                  ]
                                };
                                return $globalActions[
                                  "SupabaseUserGlobalContext.signup"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        size={"large"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.view === "signIn";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"cardSignIn"}
                  data-plasmic-override={overrides.cardSignIn}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardSignIn)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"contentCardSignIn"}
                    data-plasmic-override={overrides.contentCardSignIn}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.contentCardSignIn
                    )}
                  >
                    <div
                      data-plasmic-name={"heading"}
                      data-plasmic-override={overrides.heading}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heading
                      )}
                    >
                      {"Connexion"}
                    </div>
                    <SitexForm
                      data-plasmic-name={"formSignIn"}
                      data-plasmic-override={overrides.formSignIn}
                      className={classNames("__wab_instance", sty.formSignIn)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"formContentSignIn"}
                        data-plasmic-override={overrides.formContentSignIn}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.formContentSignIn
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"emailFieldSignIn"}
                          data-plasmic-override={overrides.emailFieldSignIn}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.emailFieldSignIn
                          )}
                        >
                          <div
                            data-plasmic-name={"labelSignInEmail"}
                            data-plasmic-override={overrides.labelSignInEmail}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labelSignInEmail
                            )}
                          >
                            {"Email*"}
                          </div>
                          <SitexTextInput
                            data-plasmic-name={"emailInputSignIn"}
                            data-plasmic-override={overrides.emailInputSignIn}
                            className={classNames(
                              "__wab_instance",
                              sty.emailInputSignIn
                            )}
                            customErrorMessage={``}
                            customValidation={``}
                            destructive={false}
                            initialValue={generateStateValueProp($state, [
                              "emailInputSignIn",
                              "value"
                            ])}
                            minLength={8}
                            nameInErrorMessages={"Email"}
                            onTextChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "emailInputSignIn",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            onValidationChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "emailInputSignIn",
                                "isInputValid"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            return console.log("undefined");
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"email@email.com"}
                            required={true}
                            type={"email"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"passwordFieldSignIn"}
                          data-plasmic-override={overrides.passwordFieldSignIn}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.passwordFieldSignIn
                          )}
                        >
                          <div
                            data-plasmic-name={"labelSignInPassword"}
                            data-plasmic-override={
                              overrides.labelSignInPassword
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labelSignInPassword
                            )}
                          >
                            {"Mot de passe*"}
                          </div>
                          <SitexTextInput
                            data-plasmic-name={"passwordInputSignIn"}
                            data-plasmic-override={
                              overrides.passwordInputSignIn
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.passwordInputSignIn
                            )}
                            customErrorMessage={"Ahahahah"}
                            customValidation={``}
                            destructive={false}
                            initialValue={generateStateValueProp($state, [
                              "passwordInputSignIn",
                              "value"
                            ])}
                            maxLength={10}
                            minLength={8}
                            nameInErrorMessages={"Password"}
                            onTextChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "passwordInputSignIn",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            onValidationChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "passwordInputSignIn",
                                "isInputValid"
                              ]).apply(null, eventArgs);
                            }}
                            placeholder={"********"}
                            required={true}
                            type={"password"}
                          />
                        </Stack__>
                        <div
                          data-plasmic-name={"passwordForgottenSignIn"}
                          data-plasmic-override={
                            overrides.passwordForgottenSignIn
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.passwordForgottenSignIn
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateView"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["view"]
                                    },
                                    operation: 0,
                                    value: "resetPassword"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateView"] != null &&
                              typeof $steps["updateView"] === "object" &&
                              typeof $steps["updateView"].then === "function"
                            ) {
                              $steps["updateView"] = await $steps["updateView"];
                            }
                          }}
                        >
                          {"Mot de passe oubli\u00e9 ?"}
                        </div>
                        <SitexButton
                          data-plasmic-name={"btnSubmitSignIn"}
                          data-plasmic-override={overrides.btnSubmitSignIn}
                          className={
                            classNames({ [sty["pcls_Um0qco2go-c2"]]: true }) +
                            " " +
                            classNames("__wab_instance", sty.btnSubmitSignIn)
                          }
                          destructive={false}
                          disabled={(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          hierarchy={"primary"}
                          icon={"none"}
                          label={"Connexion"}
                          onClick={async VarInput => {
                            const $steps = {};

                            $steps["supabaseSignIn"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "/"
                                    ]
                                  };
                                  return $globalActions[
                                    "SupabaseUserGlobalContext.login"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["supabaseSignIn"] != null &&
                              typeof $steps["supabaseSignIn"] === "object" &&
                              typeof $steps["supabaseSignIn"].then ===
                                "function"
                            ) {
                              $steps["supabaseSignIn"] = await $steps[
                                "supabaseSignIn"
                              ];
                            }
                          }}
                          size={"large"}
                        />
                      </Stack__>
                    </SitexForm>
                  </Stack__>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.view === "home";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"home"}
                  data-plasmic-override={overrides.home}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.home)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"imageSitexHome"}
                    data-plasmic-override={overrides.imageSitexHome}
                    alt={""}
                    className={classNames(sty.imageSitexHome)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "290px"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/sitex_codegen/images/frame133Svg.svg",
                      fullWidth: 567,
                      fullHeight: 274,
                      aspectRatio: 2.069343
                    }}
                  />

                  <SitexButton
                    data-plasmic-name={"buttonHome"}
                    data-plasmic-override={overrides.buttonHome}
                    className={classNames("__wab_instance", sty.buttonHome)}
                    destructive={false}
                    hierarchy={"primary"}
                    icon={"none"}
                    label={"Connexion"}
                    onClick={async VarInput => {
                      const $steps = {};

                      $steps["updateView"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["view"]
                              },
                              operation: 0,
                              value: "signUp"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateView"] != null &&
                        typeof $steps["updateView"] === "object" &&
                        typeof $steps["updateView"].then === "function"
                      ) {
                        $steps["updateView"] = await $steps["updateView"];
                      }
                    }}
                    size={"large"}
                  />
                </Stack__>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.view === "resetPassword";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"resetPassword"}
              data-plasmic-override={overrides.resetPassword}
              className={classNames(projectcss.all, sty.resetPassword)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"resetPasswordCard"}
                data-plasmic-override={overrides.resetPasswordCard}
                hasGap={true}
                className={classNames(projectcss.all, sty.resetPasswordCard)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"contentResetPasswordCard"}
                  data-plasmic-override={overrides.contentResetPasswordCard}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.contentResetPasswordCard
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"headingResetPasswordCard"}
                    data-plasmic-override={overrides.headingResetPasswordCard}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.headingResetPasswordCard
                    )}
                  >
                    <div
                      data-plasmic-name={"titleResetPAsswordCard"}
                      data-plasmic-override={overrides.titleResetPAsswordCard}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.titleResetPAsswordCard
                      )}
                    >
                      {"Mot de passe oubli\u00e9 ?"}
                    </div>
                    <div
                      data-plasmic-name={"subtitleResetPAsswordCard"}
                      data-plasmic-override={
                        overrides.subtitleResetPAsswordCard
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.subtitleResetPAsswordCard
                      )}
                    >
                      {
                        "Pas de panique, nous allons vous envoyer un e-mail pour vous aider \u00e0 r\u00e9initialiser votre mot de passe."
                      }
                    </div>
                  </Stack__>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.formResetPassword
                      ),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["formResetPassword", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["formResetPassword", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["formResetPassword"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "formResetPassword.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "formResetPassword.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"formResetPassword"}
                        data-plasmic-override={overrides.formResetPassword}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"emailBlockResetPasswordCard"}
                          data-plasmic-override={
                            overrides.emailBlockResetPasswordCard
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.emailBlockResetPasswordCard
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sGKsp
                            )}
                          >
                            {"Email*"}
                          </div>
                          <TextInput
                            data-plasmic-name={"emailResetPassword"}
                            data-plasmic-override={overrides.emailResetPassword}
                            autoFocus={true}
                            className={classNames(
                              "__wab_instance",
                              sty.emailResetPassword
                            )}
                            name={"email - resetPassword"}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "emailResetPassword",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"email@email.com"}
                            required={true}
                            type={"email"}
                            value={
                              generateStateValueProp($state, [
                                "emailResetPassword",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </Stack__>
                        <SitexButton
                          data-plasmic-name={"submitButtonResetPassword"}
                          data-plasmic-override={
                            overrides.submitButtonResetPassword
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.submitButtonResetPassword
                          )}
                          hierarchy={"primary"}
                          icon={"none"}
                          label={"R\u00e9initialiser"}
                          onClick={async VarInput => {
                            const $steps = {};

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return $state.emailResetPassword
                                            .value;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "SupabaseUserGlobalContext.resetPasswordForEmail"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          size={"large"}
                        />
                      </FormWrapper>
                    );
                  })()}
                  <SitexButton
                    data-plasmic-name={"buttonSitex"}
                    data-plasmic-override={overrides.buttonSitex}
                    className={classNames("__wab_instance", sty.buttonSitex)}
                    hierarchy={"primary"}
                    icon={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "none";
                        }
                        throw e;
                      }
                    })()}
                    label={"Annuler"}
                    onClick={async VarInput => {
                      const $steps = {};

                      $steps["updateView"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["view"]
                              },
                              operation: 0,
                              value: "signIn"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateView"] != null &&
                        typeof $steps["updateView"] === "object" &&
                        typeof $steps["updateView"].then === "function"
                      ) {
                        $steps["updateView"] = await $steps["updateView"];
                      }
                    }}
                    size={"large"}
                  />
                </Stack__>
              </Stack__>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  login: [
    "login",
    "freeBox",
    "logo",
    "signInUp",
    "cardSignUp",
    "contentCardSignUp",
    "cardSignUpTitle",
    "h2",
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp",
    "cardSignIn",
    "contentCardSignIn",
    "heading",
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn",
    "home",
    "imageSitexHome",
    "buttonHome",
    "resetPassword",
    "resetPasswordCard",
    "contentResetPasswordCard",
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard",
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword",
    "buttonSitex"
  ],
  freeBox: [
    "freeBox",
    "logo",
    "signInUp",
    "cardSignUp",
    "contentCardSignUp",
    "cardSignUpTitle",
    "h2",
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp",
    "cardSignIn",
    "contentCardSignIn",
    "heading",
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn",
    "home",
    "imageSitexHome",
    "buttonHome",
    "resetPassword",
    "resetPasswordCard",
    "contentResetPasswordCard",
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard",
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword",
    "buttonSitex"
  ],
  logo: ["logo"],
  signInUp: [
    "signInUp",
    "cardSignUp",
    "contentCardSignUp",
    "cardSignUpTitle",
    "h2",
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp",
    "cardSignIn",
    "contentCardSignIn",
    "heading",
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn",
    "home",
    "imageSitexHome",
    "buttonHome"
  ],
  cardSignUp: [
    "cardSignUp",
    "contentCardSignUp",
    "cardSignUpTitle",
    "h2",
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp"
  ],
  contentCardSignUp: [
    "contentCardSignUp",
    "cardSignUpTitle",
    "h2",
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp"
  ],
  cardSignUpTitle: ["cardSignUpTitle", "h2"],
  h2: ["h2"],
  formSignUp: [
    "formSignUp",
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp",
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg",
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator",
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp",
    "submitBtnSignUp"
  ],
  firstRowSignUp: [
    "firstRowSignUp",
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp",
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp"
  ],
  inputBlockSignInEmail2: [
    "inputBlockSignInEmail2",
    "labelSignInEmail2",
    "nameSignUp"
  ],
  labelSignInEmail2: ["labelSignInEmail2"],
  nameSignUp: ["nameSignUp"],
  inputBlockSignInEmail3: [
    "inputBlockSignInEmail3",
    "labelSignInEmail3",
    "firstNameSignUp"
  ],
  labelSignInEmail3: ["labelSignInEmail3"],
  firstNameSignUp: ["firstNameSignUp"],
  inputBlockSignInEmail4: [
    "inputBlockSignInEmail4",
    "labelSignInEmail4",
    "emailSignUp",
    "svg"
  ],
  labelSignInEmail4: ["labelSignInEmail4"],
  emailSignUp: ["emailSignUp", "svg"],
  svg: ["svg"],
  inputBlockSignInPassword2: [
    "inputBlockSignInPassword2",
    "labelSignInPassword2",
    "passwordSignUp",
    "passwordCheckIndicator"
  ],
  labelSignInPassword2: ["labelSignInPassword2"],
  passwordSignUp: ["passwordSignUp"],
  passwordCheckIndicator: ["passwordCheckIndicator"],
  inputBlockSignInPassword3: [
    "inputBlockSignInPassword3",
    "labelSignInPassword3",
    "passwordConfirmSignUp"
  ],
  labelSignInPassword3: ["labelSignInPassword3"],
  passwordConfirmSignUp: ["passwordConfirmSignUp"],
  submitBtnSignUp: ["submitBtnSignUp"],
  cardSignIn: [
    "cardSignIn",
    "contentCardSignIn",
    "heading",
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn"
  ],
  contentCardSignIn: [
    "contentCardSignIn",
    "heading",
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn"
  ],
  heading: ["heading"],
  formSignIn: [
    "formSignIn",
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn"
  ],
  formContentSignIn: [
    "formContentSignIn",
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn",
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn",
    "passwordForgottenSignIn",
    "btnSubmitSignIn"
  ],
  emailFieldSignIn: [
    "emailFieldSignIn",
    "labelSignInEmail",
    "emailInputSignIn"
  ],
  labelSignInEmail: ["labelSignInEmail"],
  emailInputSignIn: ["emailInputSignIn"],
  passwordFieldSignIn: [
    "passwordFieldSignIn",
    "labelSignInPassword",
    "passwordInputSignIn"
  ],
  labelSignInPassword: ["labelSignInPassword"],
  passwordInputSignIn: ["passwordInputSignIn"],
  passwordForgottenSignIn: ["passwordForgottenSignIn"],
  btnSubmitSignIn: ["btnSubmitSignIn"],
  home: ["home", "imageSitexHome", "buttonHome"],
  imageSitexHome: ["imageSitexHome"],
  buttonHome: ["buttonHome"],
  resetPassword: [
    "resetPassword",
    "resetPasswordCard",
    "contentResetPasswordCard",
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard",
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword",
    "buttonSitex"
  ],
  resetPasswordCard: [
    "resetPasswordCard",
    "contentResetPasswordCard",
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard",
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword",
    "buttonSitex"
  ],
  contentResetPasswordCard: [
    "contentResetPasswordCard",
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard",
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword",
    "buttonSitex"
  ],
  headingResetPasswordCard: [
    "headingResetPasswordCard",
    "titleResetPAsswordCard",
    "subtitleResetPAsswordCard"
  ],
  titleResetPAsswordCard: ["titleResetPAsswordCard"],
  subtitleResetPAsswordCard: ["subtitleResetPAsswordCard"],
  formResetPassword: [
    "formResetPassword",
    "emailBlockResetPasswordCard",
    "emailResetPassword",
    "submitButtonResetPassword"
  ],
  emailBlockResetPasswordCard: [
    "emailBlockResetPasswordCard",
    "emailResetPassword"
  ],
  emailResetPassword: ["emailResetPassword"],
  submitButtonResetPassword: ["submitButtonResetPassword"],
  buttonSitex: ["buttonSitex"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  login: "div";
  freeBox: "div";
  logo: typeof Logo;
  signInUp: "div";
  cardSignUp: "div";
  contentCardSignUp: "div";
  cardSignUpTitle: "div";
  h2: "h2";
  formSignUp: "div";
  firstRowSignUp: "div";
  inputBlockSignInEmail2: "div";
  labelSignInEmail2: "div";
  nameSignUp: typeof TextInput;
  inputBlockSignInEmail3: "div";
  labelSignInEmail3: "div";
  firstNameSignUp: typeof TextInput;
  inputBlockSignInEmail4: "div";
  labelSignInEmail4: "div";
  emailSignUp: typeof TextInput;
  svg: "svg";
  inputBlockSignInPassword2: "div";
  labelSignInPassword2: "div";
  passwordSignUp: typeof TextInput;
  passwordCheckIndicator: typeof PasswordCheckIndicator;
  inputBlockSignInPassword3: "div";
  labelSignInPassword3: "div";
  passwordConfirmSignUp: typeof TextInput;
  submitBtnSignUp: typeof SitexButton;
  cardSignIn: "div";
  contentCardSignIn: "div";
  heading: "div";
  formSignIn: typeof SitexForm;
  formContentSignIn: "div";
  emailFieldSignIn: "div";
  labelSignInEmail: "div";
  emailInputSignIn: typeof SitexTextInput;
  passwordFieldSignIn: "div";
  labelSignInPassword: "div";
  passwordInputSignIn: typeof SitexTextInput;
  passwordForgottenSignIn: "div";
  btnSubmitSignIn: typeof SitexButton;
  home: "div";
  imageSitexHome: typeof PlasmicImg__;
  buttonHome: typeof SitexButton;
  resetPassword: "div";
  resetPasswordCard: "div";
  contentResetPasswordCard: "div";
  headingResetPasswordCard: "div";
  titleResetPAsswordCard: "div";
  subtitleResetPAsswordCard: "div";
  formResetPassword: typeof FormWrapper;
  emailBlockResetPasswordCard: "div";
  emailResetPassword: typeof TextInput;
  submitButtonResetPassword: typeof SitexButton;
  buttonSitex: typeof SitexButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "login") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("login"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    logo: makeNodeComponent("logo"),
    signInUp: makeNodeComponent("signInUp"),
    cardSignUp: makeNodeComponent("cardSignUp"),
    contentCardSignUp: makeNodeComponent("contentCardSignUp"),
    cardSignUpTitle: makeNodeComponent("cardSignUpTitle"),
    h2: makeNodeComponent("h2"),
    formSignUp: makeNodeComponent("formSignUp"),
    firstRowSignUp: makeNodeComponent("firstRowSignUp"),
    inputBlockSignInEmail2: makeNodeComponent("inputBlockSignInEmail2"),
    labelSignInEmail2: makeNodeComponent("labelSignInEmail2"),
    nameSignUp: makeNodeComponent("nameSignUp"),
    inputBlockSignInEmail3: makeNodeComponent("inputBlockSignInEmail3"),
    labelSignInEmail3: makeNodeComponent("labelSignInEmail3"),
    firstNameSignUp: makeNodeComponent("firstNameSignUp"),
    inputBlockSignInEmail4: makeNodeComponent("inputBlockSignInEmail4"),
    labelSignInEmail4: makeNodeComponent("labelSignInEmail4"),
    emailSignUp: makeNodeComponent("emailSignUp"),
    svg: makeNodeComponent("svg"),
    inputBlockSignInPassword2: makeNodeComponent("inputBlockSignInPassword2"),
    labelSignInPassword2: makeNodeComponent("labelSignInPassword2"),
    passwordSignUp: makeNodeComponent("passwordSignUp"),
    passwordCheckIndicator: makeNodeComponent("passwordCheckIndicator"),
    inputBlockSignInPassword3: makeNodeComponent("inputBlockSignInPassword3"),
    labelSignInPassword3: makeNodeComponent("labelSignInPassword3"),
    passwordConfirmSignUp: makeNodeComponent("passwordConfirmSignUp"),
    submitBtnSignUp: makeNodeComponent("submitBtnSignUp"),
    cardSignIn: makeNodeComponent("cardSignIn"),
    contentCardSignIn: makeNodeComponent("contentCardSignIn"),
    heading: makeNodeComponent("heading"),
    formSignIn: makeNodeComponent("formSignIn"),
    formContentSignIn: makeNodeComponent("formContentSignIn"),
    emailFieldSignIn: makeNodeComponent("emailFieldSignIn"),
    labelSignInEmail: makeNodeComponent("labelSignInEmail"),
    emailInputSignIn: makeNodeComponent("emailInputSignIn"),
    passwordFieldSignIn: makeNodeComponent("passwordFieldSignIn"),
    labelSignInPassword: makeNodeComponent("labelSignInPassword"),
    passwordInputSignIn: makeNodeComponent("passwordInputSignIn"),
    passwordForgottenSignIn: makeNodeComponent("passwordForgottenSignIn"),
    btnSubmitSignIn: makeNodeComponent("btnSubmitSignIn"),
    home: makeNodeComponent("home"),
    imageSitexHome: makeNodeComponent("imageSitexHome"),
    buttonHome: makeNodeComponent("buttonHome"),
    resetPassword: makeNodeComponent("resetPassword"),
    resetPasswordCard: makeNodeComponent("resetPasswordCard"),
    contentResetPasswordCard: makeNodeComponent("contentResetPasswordCard"),
    headingResetPasswordCard: makeNodeComponent("headingResetPasswordCard"),
    titleResetPAsswordCard: makeNodeComponent("titleResetPAsswordCard"),
    subtitleResetPAsswordCard: makeNodeComponent("subtitleResetPAsswordCard"),
    formResetPassword: makeNodeComponent("formResetPassword"),
    emailBlockResetPasswordCard: makeNodeComponent(
      "emailBlockResetPasswordCard"
    ),
    emailResetPassword: makeNodeComponent("emailResetPassword"),
    submitButtonResetPassword: makeNodeComponent("submitButtonResetPassword"),
    buttonSitex: makeNodeComponent("buttonSitex"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
